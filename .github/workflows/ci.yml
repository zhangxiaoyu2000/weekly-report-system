name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**', 'epic/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  
jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            npm ci
          fi

      - name: Run ESLint
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            npm run lint
          fi

      - name: Run Prettier check
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            npm run format:check
          fi

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run backend code quality checks
        run: |
          if [ -f backend/pom.xml ]; then
            cd backend
            mvn checkstyle:check spotbugs:check
          fi

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            npm ci
          fi

      - name: Run unit tests
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            npm run test:unit
          fi

      - name: Run component tests
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            npm run test:component
          fi

      - name: Build frontend
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            npm run build
          fi

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testroot
          MYSQL_DATABASE: weekly_report_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h"127.0.0.1" -P"3306" --silent; do
            echo 'Waiting for MySQL...'
            sleep 1
          done

      - name: Run backend tests
        run: |
          if [ -f backend/pom.xml ]; then
            cd backend
            mvn clean test -Dspring.profiles.active=test
          fi
        env:
          MYSQL_URL: jdbc:mysql://localhost:3306/weekly_report_test
          MYSQL_USERNAME: testuser
          MYSQL_PASSWORD: testpass

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Backend Test Results
          path: backend/target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Build backend
        run: |
          if [ -f backend/pom.xml ]; then
            cd backend
            mvn clean package -DskipTests
          fi

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: backend-build
          path: backend/target/*.jar
          retention-days: 7

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Download backend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        if: hashFiles('frontend/Dockerfile') != ''
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/weekly-report-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY }}/weekly-report-frontend:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        if: hashFiles('backend/Dockerfile') != ''
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/weekly-report-backend:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY }}/weekly-report-backend:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [security-scan, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.weekly-report.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to development environment
        run: |
          echo "Deploying to development environment..."
          # Deployment script will be implemented when infrastructure is ready
          ./deploy/scripts/deploy.sh dev

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://weekly-report.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Deployment script will be implemented when infrastructure is ready
          ./deploy/scripts/deploy.sh prod

  notification:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success'
        run: |
          echo "Deployment completed successfully!"
          # Add Slack/Teams notification here if needed

      - name: Notify failure
        if: needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure'
        run: |
          echo "Deployment failed!"
          # Add Slack/Teams notification here if needed