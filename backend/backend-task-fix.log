[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------< com.weeklyreport:weekly-report-backend >---------------
[INFO] Building weekly-report-backend 0.0.1-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot:3.2.0:run (default-cli) > test-compile @ weekly-report-backend >>>
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ weekly-report-backend ---
[INFO] Copying 1 resource from src/main/resources to target/classes
[INFO] Copying 19 resources from src/main/resources to target/classes
[INFO] 
[INFO] --- compiler:3.11.0:compile (default-compile) @ weekly-report-backend ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ weekly-report-backend ---
[INFO] skip non existing resourceDirectory /Volumes/project/my-project/backend/src/test/resources
[INFO] 
[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ weekly-report-backend ---
[INFO] No sources to compile
[INFO] 
[INFO] <<< spring-boot:3.2.0:run (default-cli) < test-compile @ weekly-report-backend <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot:3.2.0:run (default-cli) @ weekly-report-backend ---
[INFO] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
[32m :: Spring Boot :: [39m              [2m (v3.2.0)[0;39m

2025-09-18 17:22:23 - Starting WeeklyReportApplication using Java 23.0.2 with PID 62672 (/Volumes/project/my-project/backend/target/classes started by zhangxiaoyu in /Volumes/project/my-project/backend)
2025-09-18 17:22:23 - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-18 17:22:23 - The following 1 profile is active: "dev"
2025-09-18 17:22:23 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-18 17:22:23 - Finished Spring Data repository scanning in 37 ms. Found 12 JPA repository interfaces.
2025-09-18 17:22:24 - Tomcat initialized with port 8081 (http)
2025-09-18 17:22:24 - Starting service [Tomcat]
2025-09-18 17:22:24 - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-18 17:22:24 - Initializing Spring embedded WebApplicationContext
2025-09-18 17:22:24 - Root WebApplicationContext: initialization completed in 1010 ms
2025-09-18 17:22:24 - Filter 'jwtAuthenticationFilter' configured for use
2025-09-18 17:22:24 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-18 17:22:24 - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-18 17:22:24 - HHH000026: Second-level cache disabled
2025-09-18 17:22:24 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-18 17:22:24 - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-18 17:22:24 - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-18 17:22:25 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-18 17:22:25 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-18 17:22:25 - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-18 17:22:26 - AI Monitoring Service initialized
2025-09-18 17:22:26 - Initializing AI service providers...
2025-09-18 17:22:26 - Calling DeepSeek API with URL: https://api.deepseek.com/chat/completions
2025-09-18 17:22:26 - Request payload: {"model":"deepseek-chat","messages":[{"role":"user","content":"hello"}],"temperature":0.1,"stream":false,"max_tokens":10}
2025-09-18 17:22:31 - DeepSeek API response status: 200 OK
2025-09-18 17:22:31 - DeepSeek API response body: {"id":"a394d854-5dca-4074-a1d7-69cdf1df156a","object":"chat.completion","created":1758187347,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"Hello! How can I help you today?"},"logprobs":null,"finish_reason":"length"}],"usage":{"prompt_tokens":5,"completion_tokens":9,"total_tokens":14,"prompt_tokens_details":{"cached_tokens":0},"prompt_cache_hit_tokens":0,"prompt_cache_miss_tokens":5},"system_fingerprint":"fp_08f168e49b_prod0820_fp8_kvcache"}
2025-09-18 17:22:31 - Registered AI provider: DeepSeek AI Service - Status: Configured and healthy
2025-09-18 17:22:31 - Registered AI provider: Mock AI Service for Testing - Status: CONFIGURED
2025-09-18 17:22:31 - Initialized 2 AI service providers
2025-09-18 17:22:32 - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-09-18 17:22:32 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@f0d5e20, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@77f1f43a, org.springframework.security.web.context.SecurityContextHolderFilter@9284768, org.springframework.security.web.header.HeaderWriterFilter@76a285c4, org.springframework.web.filter.CorsFilter@389bb2d4, org.springframework.security.web.authentication.logout.LogoutFilter@23524137, com.weeklyreport.security.JwtAuthenticationFilter@5cbe95b1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2971bebd, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4c955eaf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@362b4352, org.springframework.security.web.session.SessionManagementFilter@65de0061, org.springframework.security.web.access.ExceptionTranslationFilter@6d80cf8b, org.springframework.security.web.access.intercept.AuthorizationFilter@17a40c7a]
2025-09-18 17:22:33 - Tomcat started on port 8081 (http) with context path '/api'
2025-09-18 17:22:33 - Started WeeklyReportApplication in 10.414 seconds (process running for 10.582)
2025-09-18 17:22:33 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-18 17:22:33 - WeeklyReportHikariCP-Dev - Starting...
2025-09-18 17:22:33 - WeeklyReportHikariCP-Dev - Added connection com.mysql.cj.jdbc.ConnectionImpl@5927f2b1
2025-09-18 17:22:33 - WeeklyReportHikariCP-Dev - Start completed.
2025-09-18 17:22:33 - Super admin user already exists: superadmin
2025-09-18 17:22:33 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-18 17:22:33 - Super admin user already exists: zhangxiaoyu
2025-09-18 17:22:33 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-18 17:22:33 - Admin user already exists: admin1
2025-09-18 17:22:33 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-18 17:22:33 - Admin user already exists: admin2
2025-09-18 17:22:33 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-18 17:22:33 - Manager user already exists: manager1
=== SIMPLE COMMENTS TABLE FIX ===
Simple comments table fix failed: StatementCallback; bad SQL grammar [ALTER TABLE comments ADD COLUMN IF NOT EXISTS attachments JSON]
=== SIMPLE COMMENTS TABLE FIX COMPLETE ===
2025-09-18 17:23:27 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-18 17:23:27 - Initializing Servlet 'dispatcherServlet'
2025-09-18 17:23:27 - Completed initialization in 1 ms
2025-09-18 17:23:27 - Securing POST /auth/login
2025-09-18 17:23:27 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-18 17:23:27 - Cache miss for REQUEST dispatch to '/api/auth/login' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-18 17:23:27 - Secured POST /auth/login
2025-09-18 17:23:27 - Login attempt for user: zhangxiaoyu
2025-09-18 17:23:27 - Attempting login for user: zhangxiaoyu
2025-09-18 17:23:27 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-18 17:23:27 - User zhangxiaoyu logged in successfully
2025-09-18 17:23:27 - 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        deleted_at=?,
        department_id=?,
        email=?,
        employee_id=?,
        first_name=?,
        full_name=?,
        last_login=?,
        last_login_time=?,
        last_name=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        deleted_at=?,
        department_id=?,
        email=?,
        employee_id=?,
        first_name=?,
        full_name=?,
        last_login=?,
        last_login_time=?,
        last_name=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-09-18 17:23:27 - Login successful for user: zhangxiaoyu
2025-09-18 17:23:27 - Securing GET /simple/projects
2025-09-18 17:23:27 - Processing authentication for request: /api/simple/projects
2025-09-18 17:23:27 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:27 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:27 - Successfully authenticated user: zhangxiaoyu for request: /api/simple/projects
2025-09-18 17:23:27 - Secured GET /simple/projects
2025-09-18 17:23:27 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.deleted_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.first_name,
            ar1_0.full_name,
            ar1_0.last_login,
            ar1_0.last_login_time,
            ar1_0.last_name,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.deleted_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.first_name,
            cb1_0.full_name,
            cb1_0.last_login,
            cb1_0.last_login_time,
            cb1_0.last_name,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.deleted_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.first_name,
            mr1_0.full_name,
            mr1_0.last_login,
            mr1_0.last_login_time,
            mr1_0.last_name,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.deleted_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.first_name,
            sar1_0.full_name,
            sar1_0.last_login,
            sar1_0.last_login_time,
            sar1_0.last_name,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.deleted_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.first_name,
            ar1_0.full_name,
            ar1_0.last_login,
            ar1_0.last_login_time,
            ar1_0.last_name,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.deleted_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.first_name,
            cb1_0.full_name,
            cb1_0.last_login,
            cb1_0.last_login_time,
            cb1_0.last_name,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.deleted_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.first_name,
            mr1_0.full_name,
            mr1_0.last_login,
            mr1_0.last_login_time,
            mr1_0.last_name,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.deleted_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.first_name,
            sar1_0.full_name,
            sar1_0.last_login,
            sar1_0.last_login_time,
            sar1_0.last_name,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
2025-09-18 17:23:27 - Securing GET /project-phases/project/8
2025-09-18 17:23:27 - Processing authentication for request: /api/project-phases/project/8
2025-09-18 17:23:27 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:27 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:27 - Successfully authenticated user: zhangxiaoyu for request: /api/project-phases/project/8
2025-09-18 17:23:27 - Secured GET /project-phases/project/8
2025-09-18 17:23:27 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-18 17:23:27 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-18 17:23:27 - Securing GET /project-phases/project/7
2025-09-18 17:23:27 - Processing authentication for request: /api/project-phases/project/7
2025-09-18 17:23:27 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:27 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:27 - Successfully authenticated user: zhangxiaoyu for request: /api/project-phases/project/7
2025-09-18 17:23:27 - Secured GET /project-phases/project/7
2025-09-18 17:23:27 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-18 17:23:27 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-18 17:23:27 - Securing GET /project-phases/project/6
2025-09-18 17:23:27 - Processing authentication for request: /api/project-phases/project/6
2025-09-18 17:23:27 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:27 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:27 - Successfully authenticated user: zhangxiaoyu for request: /api/project-phases/project/6
2025-09-18 17:23:27 - Secured GET /project-phases/project/6
2025-09-18 17:23:27 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-18 17:23:27 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-18 17:23:27 - Securing GET /project-phases/project/5
2025-09-18 17:23:27 - Processing authentication for request: /api/project-phases/project/5
2025-09-18 17:23:27 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:27 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:27 - Successfully authenticated user: zhangxiaoyu for request: /api/project-phases/project/5
2025-09-18 17:23:27 - Secured GET /project-phases/project/5
2025-09-18 17:23:27 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-18 17:23:27 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-18 17:23:27 - Securing GET /project-phases/project/4
2025-09-18 17:23:27 - Processing authentication for request: /api/project-phases/project/4
2025-09-18 17:23:27 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:27 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:27 - Successfully authenticated user: zhangxiaoyu for request: /api/project-phases/project/4
2025-09-18 17:23:27 - Secured GET /project-phases/project/4
2025-09-18 17:23:27 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-18 17:23:27 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-18 17:23:27 - Securing GET /project-phases/project/3
2025-09-18 17:23:27 - Processing authentication for request: /api/project-phases/project/3
2025-09-18 17:23:27 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:27 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:27 - Successfully authenticated user: zhangxiaoyu for request: /api/project-phases/project/3
2025-09-18 17:23:27 - Secured GET /project-phases/project/3
2025-09-18 17:23:27 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-18 17:23:27 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-18 17:23:27 - Securing GET /project-phases/project/2
2025-09-18 17:23:27 - Processing authentication for request: /api/project-phases/project/2
2025-09-18 17:23:27 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:27 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:27 - Successfully authenticated user: zhangxiaoyu for request: /api/project-phases/project/2
2025-09-18 17:23:27 - Secured GET /project-phases/project/2
2025-09-18 17:23:27 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-18 17:23:27 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-18 17:23:27 - Securing GET /project-phases/project/1
2025-09-18 17:23:27 - Processing authentication for request: /api/project-phases/project/1
2025-09-18 17:23:27 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:27 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:27 - Successfully authenticated user: zhangxiaoyu for request: /api/project-phases/project/1
2025-09-18 17:23:27 - Secured GET /project-phases/project/1
2025-09-18 17:23:27 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-18 17:23:27 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-18 17:23:27 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-18 17:23:36 - Securing GET /reports
2025-09-18 17:23:36 - Processing authentication for request: /api/reports
2025-09-18 17:23:36 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:23:36 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:23:36 - Successfully authenticated user: zhangxiaoyu for request: /api/reports
2025-09-18 17:23:36 - Secured GET /reports
2025-09-18 17:23:36 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-18 17:23:36 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-18 17:23:36 - Getting weekly reports with filters - page: 0, size: 20 for user: 10001
2025-09-18 17:23:36 - Getting weekly reports with filter for user: 10001
2025-09-18 17:23:36 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-18 17:23:36 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.weekStart desc */ select
            distinct wr1_0.id,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.attachments,
            wr1_0.user_id,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.deleted_at,
            wr1_0.development_opportunities,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.priority,
            wr1_0.project_id,
            wr1_0.review_comments,
            wr1_0.reviewed_at,
            wr1_0.reviewed_by,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.summary,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.tags,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.view_count,
            wr1_0.week_end,
            wr1_0.week_start 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.user_id 
        where
            wr1_0.user_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.week_start desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.weekStart desc */ select
            distinct wr1_0.id,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.attachments,
            wr1_0.user_id,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.deleted_at,
            wr1_0.development_opportunities,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.priority,
            wr1_0.project_id,
            wr1_0.review_comments,
            wr1_0.reviewed_at,
            wr1_0.reviewed_by,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.summary,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.tags,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.view_count,
            wr1_0.week_end,
            wr1_0.week_start 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.user_id 
        where
            wr1_0.user_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.week_start desc 
        limit
            ?, ?
2025-09-18 17:23:36 - Found 1 reports from repository query
2025-09-18 17:23:36 - Report ID=100000, canView=false
2025-09-18 17:23:36 - Creating response with 0 report responses
2025-09-18 17:23:36 - Response created successfully: totalElements=1, reports.size()=0
2025-09-18 17:23:36 - Successfully retrieved 0 reports, total elements: 1
2025-09-18 17:23:59 - Securing POST /auth/refresh
2025-09-18 17:23:59 - Securing POST /auth/refresh
2025-09-18 17:23:59 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-18 17:23:59 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-18 17:23:59 - Secured POST /auth/refresh
2025-09-18 17:23:59 - Secured POST /auth/refresh
2025-09-18 17:23:59 - Token refresh attempt
2025-09-18 17:23:59 - Token refresh attempt
2025-09-18 17:23:59 - Attempting to refresh token
2025-09-18 17:23:59 - Attempting to refresh token
2025-09-18 17:23:59 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-18 17:23:59 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-18 17:23:59 - Token refresh failed - User not found
2025-09-18 17:23:59 - Token refresh failed - User not found
2025-09-18 17:24:28 - Securing POST /auth/login
2025-09-18 17:24:28 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-18 17:24:28 - Secured POST /auth/login
2025-09-18 17:24:28 - Login attempt for user: zhangxiaoyu
2025-09-18 17:24:28 - Attempting login for user: zhangxiaoyu
2025-09-18 17:24:28 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-18 17:24:28 - User zhangxiaoyu logged in successfully
2025-09-18 17:24:28 - 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        deleted_at=?,
        department_id=?,
        email=?,
        employee_id=?,
        first_name=?,
        full_name=?,
        last_login=?,
        last_login_time=?,
        last_name=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        deleted_at=?,
        department_id=?,
        email=?,
        employee_id=?,
        first_name=?,
        full_name=?,
        last_login=?,
        last_login_time=?,
        last_name=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-09-18 17:24:28 - Login successful for user: zhangxiaoyu
2025-09-18 17:24:28 - Securing GET /reports
2025-09-18 17:24:28 - Processing authentication for request: /api/reports
2025-09-18 17:24:28 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:24:28 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:24:28 - Successfully authenticated user: zhangxiaoyu for request: /api/reports
2025-09-18 17:24:28 - Secured GET /reports
2025-09-18 17:24:28 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-18 17:24:28 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-18 17:24:28 - Getting weekly reports with filters - page: 0, size: 20 for user: 10001
2025-09-18 17:24:28 - Getting weekly reports with filter for user: 10001
2025-09-18 17:24:28 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-18 17:24:28 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.weekStart desc */ select
            distinct wr1_0.id,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.attachments,
            wr1_0.user_id,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.deleted_at,
            wr1_0.development_opportunities,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.priority,
            wr1_0.project_id,
            wr1_0.review_comments,
            wr1_0.reviewed_at,
            wr1_0.reviewed_by,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.summary,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.tags,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.view_count,
            wr1_0.week_end,
            wr1_0.week_start 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.user_id 
        where
            wr1_0.user_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.week_start desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.weekStart desc */ select
            distinct wr1_0.id,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.attachments,
            wr1_0.user_id,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.deleted_at,
            wr1_0.development_opportunities,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.priority,
            wr1_0.project_id,
            wr1_0.review_comments,
            wr1_0.reviewed_at,
            wr1_0.reviewed_by,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.summary,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.tags,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.view_count,
            wr1_0.week_end,
            wr1_0.week_start 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.user_id 
        where
            wr1_0.user_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.week_start desc 
        limit
            ?, ?
2025-09-18 17:24:28 - Found 1 reports from repository query
2025-09-18 17:24:28 - Report ID=100000, canView=false
2025-09-18 17:24:28 - Creating response with 0 report responses
2025-09-18 17:24:28 - Response created successfully: totalElements=1, reports.size()=0
2025-09-18 17:24:28 - Successfully retrieved 0 reports, total elements: 1
2025-09-18 17:24:41 - Securing GET /reports
2025-09-18 17:24:41 - Processing authentication for request: /api/reports
2025-09-18 17:24:41 - Invalid JWT token: JWT strings must contain exactly 2 period characters. Found: 0
2025-09-18 17:24:41 - Invalid JWT token for request: /api/reports
2025-09-18 17:24:41 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-18 17:24:41 - Unauthorized access attempt to: /api/reports from IP: 127.0.0.1. Error: Full authentication is required to access this resource
2025-09-18 17:25:13 - Securing GET /reports
2025-09-18 17:25:13 - Processing authentication for request: /api/reports
2025-09-18 17:25:13 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:25:13 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:25:13 - Successfully authenticated user: zhangxiaoyu for request: /api/reports
2025-09-18 17:25:13 - Secured GET /reports
2025-09-18 17:25:13 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-18 17:25:13 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-18 17:25:13 - Getting weekly reports with filters - page: 0, size: 20 for user: 10001
2025-09-18 17:25:13 - Getting weekly reports with filter for user: 10001
2025-09-18 17:25:13 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.deleted_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.first_name,
        u1_0.full_name,
        u1_0.last_login,
        u1_0.last_login_time,
        u1_0.last_name,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-18 17:25:13 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.weekStart desc */ select
            distinct wr1_0.id,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.attachments,
            wr1_0.user_id,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.deleted_at,
            wr1_0.development_opportunities,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.priority,
            wr1_0.project_id,
            wr1_0.review_comments,
            wr1_0.reviewed_at,
            wr1_0.reviewed_by,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.summary,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.tags,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.view_count,
            wr1_0.week_end,
            wr1_0.week_start 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.user_id 
        where
            wr1_0.user_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.week_start desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.weekStart desc */ select
            distinct wr1_0.id,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.attachments,
            wr1_0.user_id,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.deleted_at,
            wr1_0.development_opportunities,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.priority,
            wr1_0.project_id,
            wr1_0.review_comments,
            wr1_0.reviewed_at,
            wr1_0.reviewed_by,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.summary,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.tags,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.view_count,
            wr1_0.week_end,
            wr1_0.week_start 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.user_id 
        where
            wr1_0.user_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.week_start desc 
        limit
            ?, ?
2025-09-18 17:25:13 - Found 1 reports from repository query
2025-09-18 17:25:13 - Report ID=100000, canView=false
2025-09-18 17:25:13 - Creating response with 0 report responses
2025-09-18 17:25:13 - Response created successfully: totalElements=1, reports.size()=0
2025-09-18 17:25:13 - Successfully retrieved 0 reports, total elements: 1
2025-09-18 17:25:13 - Securing GET /tasks/weekly-report/100000
2025-09-18 17:25:13 - Processing authentication for request: /api/tasks/weekly-report/100000
2025-09-18 17:25:13 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-18 17:25:13 - Created authentication for user zhangxiaoyu with authorities: [ROLE_SUPER_ADMIN]
2025-09-18 17:25:13 - Successfully authenticated user: zhangxiaoyu for request: /api/tasks/weekly-report/100000
2025-09-18 17:25:13 - Secured GET /tasks/weekly-report/100000
2025-09-18 17:25:13 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.getTasksByWeeklyReport(java.lang.Long); target is of class [com.weeklyreport.controller.TaskController]
2025-09-18 17:25:13 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.getTasksByWeeklyReport(java.lang.Long); target is of class [com.weeklyreport.controller.TaskController]
2025-09-18 17:25:13 - Fetching tasks for weekly report: 100000
2025-09-18 17:25:13 - 
    select
        wr1_0.id,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.attachments,
        wr1_0.user_id,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.deleted_at,
        wr1_0.development_opportunities,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.priority,
        wr1_0.project_id,
        wr1_0.review_comments,
        wr1_0.reviewed_at,
        wr1_0.reviewed_by,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.summary,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.tags,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.view_count,
        wr1_0.week_end,
        wr1_0.week_start 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
Hibernate: 
    select
        wr1_0.id,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.attachments,
        wr1_0.user_id,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.deleted_at,
        wr1_0.development_opportunities,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.priority,
        wr1_0.project_id,
        wr1_0.review_comments,
        wr1_0.reviewed_at,
        wr1_0.reviewed_by,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.summary,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.tags,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.view_count,
        wr1_0.week_end,
        wr1_0.week_start 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
2025-09-18 17:25:13 - 
    /* SELECT
        t 
    FROM
        Task t 
    LEFT JOIN
        
    FETCH
        t.simpleProject 
    LEFT JOIN
        
    FETCH
        t.projectPhase 
    WHERE
        t.weeklyReport = :weeklyReport 
    ORDER BY
        t.reportSection ASC,
        t.taskType ASC,
        t.createdAt ASC */ select
            t1_0.id,
            t1_0.actual_results,
            t1_0.budget,
            t1_0.completion_date,
            t1_0.created_at,
            t1_0.due_date,
            t1_0.expected_results,
            t1_0.is_completed,
            t1_0.is_overdue,
            t1_0.personnel_assignment,
            t1_0.priority,
            t1_0.progress,
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.project_id,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at,
            t1_0.quantitative_metrics,
            t1_0.report_section,
            t1_0.result_difference_analysis,
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            sp1_0.admin_reviewer_id,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            sp1_0.manager_reviewer_id,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sp1_0.super_admin_reviewer_id,
            sp1_0.timeline,
            sp1_0.updated_at,
            t1_0.start_date,
            t1_0.stop_loss_point,
            t1_0.task_name,
            t1_0.task_type,
            t1_0.timeline,
            t1_0.updated_at,
            t1_0.weekly_report_id 
        from
            tasks t1_0 
        left join
            simple_projects sp1_0 
                on sp1_0.id=t1_0.simple_project_id 
        left join
            project_phases pp1_0 
                on pp1_0.id=t1_0.project_phase_id 
        where
            t1_0.weekly_report_id=? 
        order by
            t1_0.report_section,
            t1_0.task_type,
            t1_0.created_at
Hibernate: 
    /* SELECT
        t 
    FROM
        Task t 
    LEFT JOIN
        
    FETCH
        t.simpleProject 
    LEFT JOIN
        
    FETCH
        t.projectPhase 
    WHERE
        t.weeklyReport = :weeklyReport 
    ORDER BY
        t.reportSection ASC,
        t.taskType ASC,
        t.createdAt ASC */ select
            t1_0.id,
            t1_0.actual_results,
            t1_0.budget,
            t1_0.completion_date,
            t1_0.created_at,
            t1_0.due_date,
            t1_0.expected_results,
            t1_0.is_completed,
            t1_0.is_overdue,
            t1_0.personnel_assignment,
            t1_0.priority,
            t1_0.progress,
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.project_id,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at,
            t1_0.quantitative_metrics,
            t1_0.report_section,
            t1_0.result_difference_analysis,
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            sp1_0.admin_reviewer_id,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            sp1_0.manager_reviewer_id,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sp1_0.super_admin_reviewer_id,
            sp1_0.timeline,
            sp1_0.updated_at,
            t1_0.start_date,
            t1_0.stop_loss_point,
            t1_0.task_name,
            t1_0.task_type,
            t1_0.timeline,
            t1_0.updated_at,
            t1_0.weekly_report_id 
        from
            tasks t1_0 
        left join
            simple_projects sp1_0 
                on sp1_0.id=t1_0.simple_project_id 
        left join
            project_phases pp1_0 
                on pp1_0.id=t1_0.project_phase_id 
        where
            t1_0.weekly_report_id=? 
        order by
            t1_0.report_section,
            t1_0.task_type,
            t1_0.created_at
2025-09-18 17:25:13 - Error fetching tasks for weekly report 100000: No enum constant com.weeklyreport.entity.Task.ReportSection.DEVELOPMENT_TASKS
org.springframework.dao.InvalidDataAccessApiUsageException: No enum constant com.weeklyreport.entity.Task.ReportSection.DEVELOPMENT_TASKS
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:371)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:249)
	at jdk.proxy2/jdk.proxy2.$Proxy198.findByWeeklyReportWithAssociationsOrderByReportSectionAscTaskTypeAscCreatedAtAsc(Unknown Source)
	at com.weeklyreport.service.TaskService.findTasksByWeeklyReport(TaskService.java:49)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.weeklyreport.service.TaskService$$SpringCGLIB$$0.findTasksByWeeklyReport(<generated>)
	at com.weeklyreport.controller.TaskController.getTasksByWeeklyReport(TaskController.java:268)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.weeklyreport.controller.TaskController$$SpringCGLIB$$0.getTasksByWeeklyReport(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.weeklyreport.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:72)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.IllegalArgumentException: No enum constant com.weeklyreport.entity.Task.ReportSection.DEVELOPMENT_TASKS
	at java.base/java.lang.Enum.valueOf(Enum.java:293)
	at org.hibernate.type.descriptor.java.EnumJavaType.fromName(EnumJavaType.java:239)
	at org.hibernate.type.descriptor.java.EnumJavaType.wrap(EnumJavaType.java:107)
	at org.hibernate.type.descriptor.java.EnumJavaType.wrap(EnumJavaType.java:33)
	at org.hibernate.dialect.MySQLEnumJdbcType$2.doExtract(MySQLEnumJdbcType.java:76)
	at org.hibernate.type.descriptor.jdbc.BasicExtractor.extract(BasicExtractor.java:44)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.getCurrentRowValue(JdbcValuesResultSetImpl.java:302)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.getJdbcValue(RowProcessingStateStandardImpl.java:119)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.extractRawValue(BasicResultAssembler.java:52)
	at org.hibernate.sql.results.graph.basic.BasicResultAssembler.assemble(BasicResultAssembler.java:59)
	at org.hibernate.sql.results.graph.DomainResultAssembler.assemble(DomainResultAssembler.java:33)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.extractConcreteTypeStateValues(AbstractEntityInitializer.java:1055)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.initializeEntityInstance(AbstractEntityInitializer.java:836)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.initializeEntity(AbstractEntityInitializer.java:811)
	at org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.initializeInstance(AbstractEntityInitializer.java:797)
	at org.hibernate.sql.results.internal.InitializersList.initializeInstance(InitializersList.java:71)
	at org.hibernate.sql.results.internal.StandardRowReader.coordinateInitializers(StandardRowReader.java:109)
	at org.hibernate.sql.results.internal.StandardRowReader.readRow(StandardRowReader.java:86)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:201)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:361)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:168)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.list(JdbcSelectExecutorStandardImpl.java:93)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:31)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$0(ConcreteSqmSelectQueryPlan.java:109)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:305)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:246)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 167 common frames omitted
2025-09-18 17:26:59 - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-18 17:26:59 - WeeklyReportHikariCP-Dev - Shutdown initiated...
2025-09-18 17:26:59 - WeeklyReportHikariCP-Dev - Shutdown completed.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  04:37 min
[INFO] Finished at: 2025-09-18T17:26:59+08:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:3.2.0:run (default-cli) on project weekly-report-backend: Process terminated with exit code: 143 -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
