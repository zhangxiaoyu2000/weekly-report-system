[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------< com.weeklyreport:weekly-report-backend >---------------
[INFO] Building weekly-report-backend 0.0.1-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot:3.2.0:run (default-cli) > test-compile @ weekly-report-backend >>>
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ weekly-report-backend ---
[INFO] Copying 1 resource from src/main/resources to target/classes
[INFO] Copying 13 resources from src/main/resources to target/classes
[INFO] 
[INFO] --- compiler:3.11.0:compile (default-compile) @ weekly-report-backend ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ weekly-report-backend ---
[INFO] skip non existing resourceDirectory /Volumes/project/my-project/backend/src/test/resources
[INFO] 
[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ weekly-report-backend ---
[INFO] No sources to compile
[INFO] 
[INFO] <<< spring-boot:3.2.0:run (default-cli) < test-compile @ weekly-report-backend <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot:3.2.0:run (default-cli) @ weekly-report-backend ---
[INFO] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
[32m :: Spring Boot :: [39m              [2m (v3.2.0)[0;39m

2025-09-17 10:53:46 - Starting WeeklyReportApplication using Java 23.0.2 with PID 85812 (/Volumes/project/my-project/backend/target/classes started by zhangxiaoyu in /Volumes/project/my-project/backend)
2025-09-17 10:53:46 - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-17 10:53:46 - The following 1 profile is active: "dev"
2025-09-17 10:53:48 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-17 10:53:48 - Finished Spring Data repository scanning in 119 ms. Found 13 JPA repository interfaces.
2025-09-17 10:53:49 - Tomcat initialized with port 8081 (http)
2025-09-17 10:53:49 - Starting service [Tomcat]
2025-09-17 10:53:49 - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-17 10:53:49 - Initializing Spring embedded WebApplicationContext
2025-09-17 10:53:49 - Root WebApplicationContext: initialization completed in 3449 ms
2025-09-17 10:53:50 - Filter 'jwtAuthenticationFilter' configured for use
2025-09-17 10:53:50 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-17 10:53:50 - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-17 10:53:50 - HHH000026: Second-level cache disabled
2025-09-17 10:53:51 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-17 10:53:51 - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-17 10:53:51 - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-17 10:53:53 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-17 10:53:53 - WeeklyReportHikariCP-Dev - Starting...
2025-09-17 10:53:53 - WeeklyReportHikariCP-Dev - Added connection com.mysql.cj.jdbc.ConnectionImpl@5e05dd42
2025-09-17 10:53:53 - WeeklyReportHikariCP-Dev - Start completed.
2025-09-17 10:53:53 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-17 10:53:54 - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-17 10:53:55 - AI Monitoring Service initialized
2025-09-17 10:53:55 - Initializing AI service providers...
2025-09-17 10:53:55 - Calling DeepSeek API with URL: https://api.deepseek.com/chat/completions
2025-09-17 10:53:55 - Request payload: {"model":"deepseek-chat","messages":[{"role":"user","content":"hello"}],"temperature":0.1,"stream":false,"max_tokens":10}
2025-09-17 10:54:01 - DeepSeek API response status: 200 OK
2025-09-17 10:54:01 - DeepSeek API response body: {"id":"25461f21-5da7-4d0d-b127-d7ef9536ffcb","object":"chat.completion","created":1758077637,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"Hello! How can I help you today?"},"logprobs":null,"finish_reason":"length"}],"usage":{"prompt_tokens":5,"completion_tokens":9,"total_tokens":14,"prompt_tokens_details":{"cached_tokens":0},"prompt_cache_hit_tokens":0,"prompt_cache_miss_tokens":5},"system_fingerprint":"fp_08f168e49b_prod0820_fp8_kvcache"}
2025-09-17 10:54:01 - Registered AI provider: DeepSeek AI Service - Status: Configured and healthy
2025-09-17 10:54:01 - Registered AI provider: Mock AI Service for Testing - Status: CONFIGURED
2025-09-17 10:54:01 - Initialized 2 AI service providers
2025-09-17 10:54:06 - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-09-17 10:54:06 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@743cfb82, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@633d254f, org.springframework.security.web.context.SecurityContextHolderFilter@259ac2ab, org.springframework.security.web.header.HeaderWriterFilter@1052e74c, org.springframework.web.filter.CorsFilter@1025c56c, org.springframework.security.web.authentication.logout.LogoutFilter@7604bb54, com.weeklyreport.security.JwtAuthenticationFilter@29f3185c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@66429216, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4e3fe64f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3d204654, org.springframework.security.web.session.SessionManagementFilter@5d256ac5, org.springframework.security.web.access.ExceptionTranslationFilter@41ada8a6, org.springframework.security.web.access.intercept.AuthorizationFilter@54d5b3e8]
2025-09-17 10:54:09 - Tomcat started on port 8081 (http) with context path '/api'
2025-09-17 10:54:09 - Started WeeklyReportApplication in 23.295 seconds (process running for 23.685)
2025-09-17 10:54:09 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 10:54:09 - Super admin user already exists: superadmin
2025-09-17 10:54:09 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 10:54:09 - Super admin user already exists: zhangxiaoyu
2025-09-17 10:54:09 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 10:54:09 - Admin user already exists: admin1
2025-09-17 10:54:09 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 10:54:09 - Admin user already exists: admin2
2025-09-17 10:54:09 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 10:54:09 - Manager user already exists: manager1
2025-09-17 11:04:28 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-17 11:04:28 - Initializing Servlet 'dispatcherServlet'
2025-09-17 11:04:28 - Completed initialization in 7 ms
2025-09-17 11:04:28 - Securing POST /auth/login
2025-09-17 11:04:28 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 11:04:28 - Cache miss for REQUEST dispatch to '/api/auth/login' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-17 11:04:28 - Secured POST /auth/login
2025-09-17 11:04:28 - Login attempt for user: manager1
2025-09-17 11:04:28 - Attempting login for user: manager1
2025-09-17 11:04:28 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 11:04:29 - User manager1 logged in successfully
2025-09-17 11:04:29 - 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-09-17 11:04:29 - Login successful for user: manager1
2025-09-17 11:04:29 - Securing GET /reports
2025-09-17 11:04:29 - Processing authentication for request: /api/reports
2025-09-17 11:04:29 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:29 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:29 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:04:30 - Secured GET /reports
2025-09-17 11:04:30 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:30 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:30 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 11:04:30 - Getting weekly reports with filter for user: 5
2025-09-17 11:04:30 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:04:30 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 11:04:30 - Found 0 reports from repository query
2025-09-17 11:04:30 - Creating response with 0 report responses
2025-09-17 11:04:36 - Securing GET /reports
2025-09-17 11:04:36 - Processing authentication for request: /api/reports
2025-09-17 11:04:36 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:36 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:36 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:04:36 - Secured GET /reports
2025-09-17 11:04:36 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:36 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:36 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 11:04:36 - Getting weekly reports with filter for user: 5
2025-09-17 11:04:36 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:04:36 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 11:04:36 - Found 0 reports from repository query
2025-09-17 11:04:36 - Creating response with 0 report responses
2025-09-17 11:04:39 - Securing GET /reports
2025-09-17 11:04:39 - Processing authentication for request: /api/reports
2025-09-17 11:04:39 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:39 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:39 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:04:39 - Secured GET /reports
2025-09-17 11:04:39 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:39 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:39 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 11:04:39 - Getting weekly reports with filter for user: 5
2025-09-17 11:04:39 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:04:39 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 11:04:39 - Found 0 reports from repository query
2025-09-17 11:04:39 - Creating response with 0 report responses
2025-09-17 11:04:39 - Securing GET /reports
2025-09-17 11:04:39 - Processing authentication for request: /api/reports
2025-09-17 11:04:39 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:39 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:39 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:04:39 - Secured GET /reports
2025-09-17 11:04:39 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:39 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:39 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 11:04:39 - Getting weekly reports with filter for user: 5
2025-09-17 11:04:39 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:04:39 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 11:04:39 - Found 0 reports from repository query
2025-09-17 11:04:39 - Creating response with 0 report responses
2025-09-17 11:04:39 - Securing GET /reports
2025-09-17 11:04:39 - Processing authentication for request: /api/reports
2025-09-17 11:04:39 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:39 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:39 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:04:39 - Secured GET /reports
2025-09-17 11:04:39 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:39 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:39 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 11:04:39 - Getting weekly reports with filter for user: 5
2025-09-17 11:04:39 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:04:39 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 11:04:39 - Found 0 reports from repository query
2025-09-17 11:04:39 - Creating response with 0 report responses
2025-09-17 11:04:40 - Securing GET /reports
2025-09-17 11:04:40 - Processing authentication for request: /api/reports
2025-09-17 11:04:40 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:40 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:40 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:04:40 - Secured GET /reports
2025-09-17 11:04:40 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:40 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:40 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 11:04:40 - Getting weekly reports with filter for user: 5
2025-09-17 11:04:40 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:04:40 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 11:04:40 - Found 0 reports from repository query
2025-09-17 11:04:40 - Creating response with 0 report responses
2025-09-17 11:04:40 - Securing GET /reports
2025-09-17 11:04:40 - Processing authentication for request: /api/reports
2025-09-17 11:04:40 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:40 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:40 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:04:40 - Secured GET /reports
2025-09-17 11:04:40 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:40 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:04:40 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 11:04:40 - Getting weekly reports with filter for user: 5
2025-09-17 11:04:40 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:04:40 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 11:04:40 - Found 0 reports from repository query
2025-09-17 11:04:40 - Creating response with 0 report responses
2025-09-17 11:04:44 - Securing GET /simple/projects/my?status=ALL
2025-09-17 11:04:44 - Processing authentication for request: /api/simple/projects/my
2025-09-17 11:04:44 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:44 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:44 - Successfully authenticated user: manager1 for request: /api/simple/projects/my
2025-09-17 11:04:44 - Secured GET /simple/projects/my?status=ALL
2025-09-17 11:04:44 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:04:44 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
2025-09-17 11:04:45 - Securing GET /simple/projects/1
2025-09-17 11:04:45 - Processing authentication for request: /api/simple/projects/1
2025-09-17 11:04:45 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:45 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:45 - Successfully authenticated user: manager1 for request: /api/simple/projects/1
2025-09-17 11:04:45 - Secured GET /simple/projects/1
2025-09-17 11:04:45 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    LEFT JOIN
        
    FETCH
        p.projectPhases 
    WHERE
        p.id = :id */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            pp1_0.project_id,
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.key_indicators,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        left join
            project_phases pp1_0 
                on sp1_0.id=pp1_0.project_id 
        where
            sp1_0.id=?
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    LEFT JOIN
        
    FETCH
        p.projectPhases 
    WHERE
        p.id = :id */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            pp1_0.project_id,
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.key_indicators,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        left join
            project_phases pp1_0 
                on sp1_0.id=pp1_0.project_id 
        where
            sp1_0.id=?
2025-09-17 11:04:45 - Securing GET /project-phases/project/1
2025-09-17 11:04:45 - Processing authentication for request: /api/project-phases/project/1
2025-09-17 11:04:45 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:45 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:45 - Successfully authenticated user: manager1 for request: /api/project-phases/project/1
2025-09-17 11:04:45 - Secured GET /project-phases/project/1
2025-09-17 11:04:45 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:04:45 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:04:45 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-17 11:04:45 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-17 11:04:52 - Securing GET /simple/projects/my?status=ALL
2025-09-17 11:04:52 - Processing authentication for request: /api/simple/projects/my
2025-09-17 11:04:52 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:04:52 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:04:52 - Successfully authenticated user: manager1 for request: /api/simple/projects/my
2025-09-17 11:04:52 - Secured GET /simple/projects/my?status=ALL
2025-09-17 11:04:52 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:04:52 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
2025-09-17 11:04:54 - Securing POST /auth/logout
2025-09-17 11:04:54 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 11:04:54 - Secured POST /auth/logout
2025-09-17 11:04:54 - Logout attempt
2025-09-17 11:04:54 - Attempting logout
2025-09-17 11:04:54 - User logged out successfully
2025-09-17 11:04:54 - Logout successful
2025-09-17 11:05:07 - Securing POST /auth/login
2025-09-17 11:05:07 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 11:05:07 - Secured POST /auth/login
2025-09-17 11:05:07 - Login attempt for user: admin2
2025-09-17 11:05:07 - Attempting login for user: admin2
2025-09-17 11:05:07 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 11:05:07 - Login failed for user: admin2 - Account has been deactivated
2025-09-17 11:05:11 - Securing POST /auth/login
2025-09-17 11:05:11 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 11:05:11 - Secured POST /auth/login
2025-09-17 11:05:11 - Login attempt for user: admin1
2025-09-17 11:05:11 - Attempting login for user: admin1
2025-09-17 11:05:11 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 11:05:12 - User admin1 logged in successfully
2025-09-17 11:05:12 - 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-09-17 11:05:12 - Login successful for user: admin1
2025-09-17 11:05:12 - Securing GET /reports
2025-09-17 11:05:12 - Processing authentication for request: /api/reports
2025-09-17 11:05:12 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 11:05:12 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 11:05:12 - Successfully authenticated user: admin1 for request: /api/reports
2025-09-17 11:05:12 - Secured GET /reports
2025-09-17 11:05:12 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:05:12 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:05:12 - Getting weekly reports with filters - page: 0, size: 20 for user: 3
2025-09-17 11:05:12 - Getting weekly reports with filter for user: 3
2025-09-17 11:05:12 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:05:12 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 11:05:12 - Found 0 reports from repository query
2025-09-17 11:05:12 - Creating response with 0 report responses
2025-09-17 11:05:14 - Securing GET /simple/projects
2025-09-17 11:05:14 - Processing authentication for request: /api/simple/projects
2025-09-17 11:05:14 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 11:05:14 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 11:05:14 - Successfully authenticated user: admin1 for request: /api/simple/projects
2025-09-17 11:05:14 - Secured GET /simple/projects
2025-09-17 11:05:14 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
2025-09-17 11:05:14 - Securing GET /project-phases/project/1
2025-09-17 11:05:14 - Processing authentication for request: /api/project-phases/project/1
2025-09-17 11:05:14 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 11:05:14 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 11:05:14 - Successfully authenticated user: admin1 for request: /api/project-phases/project/1
2025-09-17 11:05:14 - Secured GET /project-phases/project/1
2025-09-17 11:05:14 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:14 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:14 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-17 11:05:14 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-17 11:05:14 - Securing GET /weekly-reports/all
2025-09-17 11:05:14 - Processing authentication for request: /api/weekly-reports/all
2025-09-17 11:05:14 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 11:05:14 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 11:05:14 - Successfully authenticated user: admin1 for request: /api/weekly-reports/all
2025-09-17 11:05:15 - Secured GET /weekly-reports/all
2025-09-17 11:05:15 - Unexpected exception: No static resource weekly-reports/all. - Request: uri=/api/weekly-reports/all
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource weekly-reports/all.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.weeklyreport.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:72)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-09-17 11:05:15 - Securing GET /simple/projects
2025-09-17 11:05:15 - Processing authentication for request: /api/simple/projects
2025-09-17 11:05:15 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 11:05:15 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 11:05:15 - Successfully authenticated user: admin1 for request: /api/simple/projects
2025-09-17 11:05:15 - Secured GET /simple/projects
2025-09-17 11:05:15 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
2025-09-17 11:05:15 - Securing GET /project-phases/project/1
2025-09-17 11:05:15 - Processing authentication for request: /api/project-phases/project/1
2025-09-17 11:05:15 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 11:05:15 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 11:05:15 - Successfully authenticated user: admin1 for request: /api/project-phases/project/1
2025-09-17 11:05:15 - Secured GET /project-phases/project/1
2025-09-17 11:05:15 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:15 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:15 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-17 11:05:15 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-17 11:05:17 - Securing POST /approval/projects/1/admin-approve
2025-09-17 11:05:17 - Processing authentication for request: /api/approval/projects/1/admin-approve
2025-09-17 11:05:17 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 11:05:17 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 11:05:17 - Successfully authenticated user: admin1 for request: /api/approval/projects/1/admin-approve
2025-09-17 11:05:17 - Secured POST /approval/projects/1/admin-approve
2025-09-17 11:05:17 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ApprovalController.adminApproveProject(java.lang.Long,com.weeklyreport.controller.ApprovalController$ApprovalRequest,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ApprovalController]
2025-09-17 11:05:17 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ApprovalController.adminApproveProject(java.lang.Long,com.weeklyreport.controller.ApprovalController$ApprovalRequest,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ApprovalController]
2025-09-17 11:05:17 - Authorizing method invocation ReflectiveMethodInvocation: public com.weeklyreport.entity.User com.weeklyreport.service.UserService.getUserById(java.lang.Long); target is of class [com.weeklyreport.service.UserService]
2025-09-17 11:05:17 - Authorized method invocation ReflectiveMethodInvocation: public com.weeklyreport.entity.User com.weeklyreport.service.UserService.getUserById(java.lang.Long); target is of class [com.weeklyreport.service.UserService]
2025-09-17 11:05:17 - Fetching user by ID: 3
2025-09-17 11:05:17 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:05:17 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    LEFT JOIN
        
    FETCH
        p.projectPhases 
    WHERE
        p.id = :id */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            pp1_0.project_id,
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.key_indicators,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        left join
            project_phases pp1_0 
                on sp1_0.id=pp1_0.project_id 
        where
            sp1_0.id=?
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    LEFT JOIN
        
    FETCH
        p.projectPhases 
    WHERE
        p.id = :id */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            pp1_0.project_id,
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.key_indicators,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        left join
            project_phases pp1_0 
                on sp1_0.id=pp1_0.project_id 
        where
            sp1_0.id=?
2025-09-17 11:05:17 - 
    /* update
        for com.weeklyreport.entity.SimpleProject */update simple_projects 
    set
        actual_results=?,
        admin_review_comment=?,
        admin_reviewed_at=?,
        admin_reviewer_id=?,
        ai_analysis_result=?,
        ai_analyzed_at=?,
        ai_confidence=?,
        ai_feasibility_score=?,
        ai_key_issues=?,
        ai_processing_time_ms=?,
        ai_provider_used=?,
        ai_recommendations=?,
        ai_risk_level=?,
        created_by=?,
        expected_results=?,
        manager_review_comment=?,
        manager_reviewed_at=?,
        manager_reviewer_id=?,
        project_content=?,
        project_members=?,
        project_name=?,
        status=?,
        stop_loss=?,
        super_admin_review_comment=?,
        super_admin_reviewed_at=?,
        super_admin_reviewer_id=?,
        timeline=?,
        updated_at=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.SimpleProject */update simple_projects 
    set
        actual_results=?,
        admin_review_comment=?,
        admin_reviewed_at=?,
        admin_reviewer_id=?,
        ai_analysis_result=?,
        ai_analyzed_at=?,
        ai_confidence=?,
        ai_feasibility_score=?,
        ai_key_issues=?,
        ai_processing_time_ms=?,
        ai_provider_used=?,
        ai_recommendations=?,
        ai_risk_level=?,
        created_by=?,
        expected_results=?,
        manager_review_comment=?,
        manager_reviewed_at=?,
        manager_reviewer_id=?,
        project_content=?,
        project_members=?,
        project_name=?,
        status=?,
        stop_loss=?,
        super_admin_review_comment=?,
        super_admin_reviewed_at=?,
        super_admin_reviewer_id=?,
        timeline=?,
        updated_at=? 
    where
        id=?
2025-09-17 11:05:19 - Securing GET /simple/projects
2025-09-17 11:05:19 - Processing authentication for request: /api/simple/projects
2025-09-17 11:05:19 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 11:05:19 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 11:05:19 - Successfully authenticated user: admin1 for request: /api/simple/projects
2025-09-17 11:05:19 - Secured GET /simple/projects
2025-09-17 11:05:19 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
2025-09-17 11:05:19 - Securing GET /project-phases/project/1
2025-09-17 11:05:19 - Processing authentication for request: /api/project-phases/project/1
2025-09-17 11:05:19 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 11:05:19 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 11:05:19 - Successfully authenticated user: admin1 for request: /api/project-phases/project/1
2025-09-17 11:05:19 - Secured GET /project-phases/project/1
2025-09-17 11:05:19 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:19 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:19 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-17 11:05:19 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-17 11:05:30 - Securing POST /auth/logout
2025-09-17 11:05:30 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 11:05:30 - Secured POST /auth/logout
2025-09-17 11:05:30 - Logout attempt
2025-09-17 11:05:30 - Attempting logout
2025-09-17 11:05:30 - User logged out successfully
2025-09-17 11:05:30 - Logout successful
2025-09-17 11:05:47 - Securing POST /auth/login
2025-09-17 11:05:47 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 11:05:47 - Secured POST /auth/login
2025-09-17 11:05:47 - Login attempt for user: superadmin
2025-09-17 11:05:47 - Attempting login for user: superadmin
2025-09-17 11:05:47 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 11:05:49 - User superadmin logged in successfully
2025-09-17 11:05:49 - 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-09-17 11:05:49 - Login successful for user: superadmin
2025-09-17 11:05:49 - Securing GET /simple/projects
2025-09-17 11:05:49 - Processing authentication for request: /api/simple/projects
2025-09-17 11:05:49 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-17 11:05:49 - Created authentication for user superadmin with authorities: [ROLE_SUPER_ADMIN]
2025-09-17 11:05:49 - Successfully authenticated user: superadmin for request: /api/simple/projects
2025-09-17 11:05:49 - Secured GET /simple/projects
2025-09-17 11:05:49 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
2025-09-17 11:05:49 - Securing GET /project-phases/project/1
2025-09-17 11:05:49 - Processing authentication for request: /api/project-phases/project/1
2025-09-17 11:05:49 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-17 11:05:49 - Created authentication for user superadmin with authorities: [ROLE_SUPER_ADMIN]
2025-09-17 11:05:49 - Successfully authenticated user: superadmin for request: /api/project-phases/project/1
2025-09-17 11:05:49 - Secured GET /project-phases/project/1
2025-09-17 11:05:49 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:49 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:49 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-17 11:05:49 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-17 11:05:51 - Securing GET /weekly-reports/all
2025-09-17 11:05:51 - Processing authentication for request: /api/weekly-reports/all
2025-09-17 11:05:51 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-17 11:05:51 - Created authentication for user superadmin with authorities: [ROLE_SUPER_ADMIN]
2025-09-17 11:05:51 - Successfully authenticated user: superadmin for request: /api/weekly-reports/all
2025-09-17 11:05:52 - Secured GET /weekly-reports/all
2025-09-17 11:05:52 - Unexpected exception: No static resource weekly-reports/all. - Request: uri=/api/weekly-reports/all
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource weekly-reports/all.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.weeklyreport.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:72)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-09-17 11:05:52 - Securing GET /simple/projects
2025-09-17 11:05:52 - Processing authentication for request: /api/simple/projects
2025-09-17 11:05:52 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-17 11:05:52 - Created authentication for user superadmin with authorities: [ROLE_SUPER_ADMIN]
2025-09-17 11:05:52 - Successfully authenticated user: superadmin for request: /api/simple/projects
2025-09-17 11:05:52 - Secured GET /simple/projects
2025-09-17 11:05:52 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
2025-09-17 11:05:52 - Securing GET /project-phases/project/1
2025-09-17 11:05:52 - Processing authentication for request: /api/project-phases/project/1
2025-09-17 11:05:52 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-17 11:05:52 - Created authentication for user superadmin with authorities: [ROLE_SUPER_ADMIN]
2025-09-17 11:05:52 - Successfully authenticated user: superadmin for request: /api/project-phases/project/1
2025-09-17 11:05:52 - Secured GET /project-phases/project/1
2025-09-17 11:05:52 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:52 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:52 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-17 11:05:52 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-17 11:05:54 - Securing POST /approval/projects/1/super-admin-approve
2025-09-17 11:05:54 - Processing authentication for request: /api/approval/projects/1/super-admin-approve
2025-09-17 11:05:54 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-17 11:05:54 - Created authentication for user superadmin with authorities: [ROLE_SUPER_ADMIN]
2025-09-17 11:05:54 - Successfully authenticated user: superadmin for request: /api/approval/projects/1/super-admin-approve
2025-09-17 11:05:54 - Secured POST /approval/projects/1/super-admin-approve
2025-09-17 11:05:54 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ApprovalController.superAdminApproveProject(java.lang.Long,com.weeklyreport.controller.ApprovalController$ApprovalRequest,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ApprovalController]
2025-09-17 11:05:54 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ApprovalController.superAdminApproveProject(java.lang.Long,com.weeklyreport.controller.ApprovalController$ApprovalRequest,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ApprovalController]
2025-09-17 11:05:54 - Authorizing method invocation ReflectiveMethodInvocation: public com.weeklyreport.entity.User com.weeklyreport.service.UserService.getUserById(java.lang.Long); target is of class [com.weeklyreport.service.UserService]
2025-09-17 11:05:54 - Authorized method invocation ReflectiveMethodInvocation: public com.weeklyreport.entity.User com.weeklyreport.service.UserService.getUserById(java.lang.Long); target is of class [com.weeklyreport.service.UserService]
2025-09-17 11:05:54 - Fetching user by ID: 1
2025-09-17 11:05:54 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:05:54 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    LEFT JOIN
        
    FETCH
        p.projectPhases 
    WHERE
        p.id = :id */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            pp1_0.project_id,
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.key_indicators,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        left join
            project_phases pp1_0 
                on sp1_0.id=pp1_0.project_id 
        where
            sp1_0.id=?
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    LEFT JOIN
        
    FETCH
        p.projectPhases 
    WHERE
        p.id = :id */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            pp1_0.project_id,
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.key_indicators,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        left join
            project_phases pp1_0 
                on sp1_0.id=pp1_0.project_id 
        where
            sp1_0.id=?
2025-09-17 11:05:54 - 
    /* update
        for com.weeklyreport.entity.SimpleProject */update simple_projects 
    set
        actual_results=?,
        admin_review_comment=?,
        admin_reviewed_at=?,
        admin_reviewer_id=?,
        ai_analysis_result=?,
        ai_analyzed_at=?,
        ai_confidence=?,
        ai_feasibility_score=?,
        ai_key_issues=?,
        ai_processing_time_ms=?,
        ai_provider_used=?,
        ai_recommendations=?,
        ai_risk_level=?,
        created_by=?,
        expected_results=?,
        manager_review_comment=?,
        manager_reviewed_at=?,
        manager_reviewer_id=?,
        project_content=?,
        project_members=?,
        project_name=?,
        status=?,
        stop_loss=?,
        super_admin_review_comment=?,
        super_admin_reviewed_at=?,
        super_admin_reviewer_id=?,
        timeline=?,
        updated_at=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.SimpleProject */update simple_projects 
    set
        actual_results=?,
        admin_review_comment=?,
        admin_reviewed_at=?,
        admin_reviewer_id=?,
        ai_analysis_result=?,
        ai_analyzed_at=?,
        ai_confidence=?,
        ai_feasibility_score=?,
        ai_key_issues=?,
        ai_processing_time_ms=?,
        ai_provider_used=?,
        ai_recommendations=?,
        ai_risk_level=?,
        created_by=?,
        expected_results=?,
        manager_review_comment=?,
        manager_reviewed_at=?,
        manager_reviewer_id=?,
        project_content=?,
        project_members=?,
        project_name=?,
        status=?,
        stop_loss=?,
        super_admin_review_comment=?,
        super_admin_reviewed_at=?,
        super_admin_reviewer_id=?,
        timeline=?,
        updated_at=? 
    where
        id=?
2025-09-17 11:05:57 - Securing GET /simple/projects
2025-09-17 11:05:57 - Processing authentication for request: /api/simple/projects
2025-09-17 11:05:57 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-17 11:05:57 - Created authentication for user superadmin with authorities: [ROLE_SUPER_ADMIN]
2025-09-17 11:05:57 - Successfully authenticated user: superadmin for request: /api/simple/projects
2025-09-17 11:05:57 - Secured GET /simple/projects
2025-09-17 11:05:57 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
2025-09-17 11:05:57 - Securing GET /project-phases/project/1
2025-09-17 11:05:57 - Processing authentication for request: /api/project-phases/project/1
2025-09-17 11:05:57 - Extracted authorities from token: [ROLE_SUPER_ADMIN] for roles: ROLE_SUPER_ADMIN
2025-09-17 11:05:57 - Created authentication for user superadmin with authorities: [ROLE_SUPER_ADMIN]
2025-09-17 11:05:57 - Successfully authenticated user: superadmin for request: /api/project-phases/project/1
2025-09-17 11:05:57 - Secured GET /project-phases/project/1
2025-09-17 11:05:57 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:57 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:05:57 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-17 11:05:57 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-17 11:05:59 - Securing POST /auth/logout
2025-09-17 11:05:59 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 11:05:59 - Secured POST /auth/logout
2025-09-17 11:05:59 - Logout attempt
2025-09-17 11:05:59 - Attempting logout
2025-09-17 11:05:59 - User logged out successfully
2025-09-17 11:05:59 - Logout successful
2025-09-17 11:06:12 - Securing POST /auth/login
2025-09-17 11:06:12 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 11:06:12 - Secured POST /auth/login
2025-09-17 11:06:12 - Login attempt for user: manager1
2025-09-17 11:06:12 - Attempting login for user: manager1
2025-09-17 11:06:12 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 11:06:13 - User manager1 logged in successfully
2025-09-17 11:06:13 - 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-09-17 11:06:13 - Login successful for user: manager1
2025-09-17 11:06:14 - Securing GET /reports
2025-09-17 11:06:14 - Processing authentication for request: /api/reports
2025-09-17 11:06:14 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:14 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:14 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:06:14 - Secured GET /reports
2025-09-17 11:06:14 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:06:14 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:06:14 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 11:06:14 - Getting weekly reports with filter for user: 5
2025-09-17 11:06:14 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:06:14 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 11:06:14 - Found 0 reports from repository query
2025-09-17 11:06:14 - Creating response with 0 report responses
2025-09-17 11:06:16 - Securing GET /simple/projects/my?status=ALL
2025-09-17 11:06:16 - Processing authentication for request: /api/simple/projects/my
2025-09-17 11:06:16 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:16 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:16 - Successfully authenticated user: manager1 for request: /api/simple/projects/my
2025-09-17 11:06:16 - Secured GET /simple/projects/my?status=ALL
2025-09-17 11:06:16 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:06:16 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
2025-09-17 11:06:20 - Securing GET /task-templates
2025-09-17 11:06:20 - Processing authentication for request: /api/task-templates
2025-09-17 11:06:20 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:20 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:20 - Successfully authenticated user: manager1 for request: /api/task-templates
2025-09-17 11:06:20 - Secured GET /task-templates
2025-09-17 11:06:20 - Unexpected exception: No static resource task-templates. - Request: uri=/api/task-templates
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource task-templates.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.weeklyreport.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:72)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-09-17 11:06:24 - Securing GET /simple/projects/my?status=ALL
2025-09-17 11:06:24 - Processing authentication for request: /api/simple/projects/my
2025-09-17 11:06:24 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:24 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:24 - Successfully authenticated user: manager1 for request: /api/simple/projects/my
2025-09-17 11:06:24 - Secured GET /simple/projects/my?status=ALL
2025-09-17 11:06:24 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:06:24 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
2025-09-17 11:06:25 - Securing GET /tasks/routine/selectable
2025-09-17 11:06:25 - Processing authentication for request: /api/tasks/routine/selectable
2025-09-17 11:06:25 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:25 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:25 - Successfully authenticated user: manager1 for request: /api/tasks/routine/selectable
2025-09-17 11:06:25 - Secured GET /tasks/routine/selectable
2025-09-17 11:06:25 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.getSelectableRoutineTasks(); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:06:25 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.getSelectableRoutineTasks(); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:06:25 - Fetching selectable routine tasks
2025-09-17 11:06:25 - 
    /* SELECT
        DISTINCT t 
    FROM
        Task t 
    WHERE
        t.taskType = 'ROUTINE' 
        AND t.weeklyReport IS NULL 
    ORDER BY
        t.taskName ASC */ select
            distinct t1_0.id,
            t1_0.actual_results,
            t1_0.budget,
            t1_0.completion_date,
            t1_0.created_at,
            t1_0.due_date,
            t1_0.expected_results,
            t1_0.is_completed,
            t1_0.is_overdue,
            t1_0.personnel_assignment,
            t1_0.priority,
            t1_0.progress,
            t1_0.project_phase_id,
            t1_0.quantitative_metrics,
            t1_0.report_section,
            t1_0.result_difference_analysis,
            t1_0.simple_project_id,
            t1_0.start_date,
            t1_0.stop_loss_point,
            t1_0.task_name,
            t1_0.task_template_id,
            t1_0.task_type,
            t1_0.timeline,
            t1_0.updated_at,
            t1_0.weekly_report_id 
        from
            tasks t1_0 
        where
            t1_0.task_type='ROUTINE' 
            and t1_0.weekly_report_id is null 
        order by
            t1_0.task_name
Hibernate: 
    /* SELECT
        DISTINCT t 
    FROM
        Task t 
    WHERE
        t.taskType = 'ROUTINE' 
        AND t.weeklyReport IS NULL 
    ORDER BY
        t.taskName ASC */ select
            distinct t1_0.id,
            t1_0.actual_results,
            t1_0.budget,
            t1_0.completion_date,
            t1_0.created_at,
            t1_0.due_date,
            t1_0.expected_results,
            t1_0.is_completed,
            t1_0.is_overdue,
            t1_0.personnel_assignment,
            t1_0.priority,
            t1_0.progress,
            t1_0.project_phase_id,
            t1_0.quantitative_metrics,
            t1_0.report_section,
            t1_0.result_difference_analysis,
            t1_0.simple_project_id,
            t1_0.start_date,
            t1_0.stop_loss_point,
            t1_0.task_name,
            t1_0.task_template_id,
            t1_0.task_type,
            t1_0.timeline,
            t1_0.updated_at,
            t1_0.weekly_report_id 
        from
            tasks t1_0 
        where
            t1_0.task_type='ROUTINE' 
            and t1_0.weekly_report_id is null 
        order by
            t1_0.task_name
2025-09-17 11:06:25 - Retrieved 0 routine tasks for selection
2025-09-17 11:06:32 - Securing POST /tasks/routine/template
2025-09-17 11:06:32 - Processing authentication for request: /api/tasks/routine/template
2025-09-17 11:06:32 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:32 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:32 - Successfully authenticated user: manager1 for request: /api/tasks/routine/template
2025-09-17 11:06:32 - Secured POST /tasks/routine/template
2025-09-17 11:06:32 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.createRoutineTaskTemplate(com.weeklyreport.controller.TaskController$RoutineTaskTemplateRequest); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:06:32 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.createRoutineTaskTemplate(com.weeklyreport.controller.TaskController$RoutineTaskTemplateRequest); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:06:32 - Creating routine task template: 12
2025-09-17 11:06:32 - 
    /* SELECT
        COUNT(t) > 0 
    FROM
        Task t 
    WHERE
        t.taskName = :taskName 
        AND t.taskType = 'ROUTINE' 
        AND t.weeklyReport IS NULL */ select
            count(t1_0.id)>0 
        from
            tasks t1_0 
        where
            t1_0.task_name=? 
            and t1_0.task_type='ROUTINE' 
            and t1_0.weekly_report_id is null
Hibernate: 
    /* SELECT
        COUNT(t) > 0 
    FROM
        Task t 
    WHERE
        t.taskName = :taskName 
        AND t.taskType = 'ROUTINE' 
        AND t.weeklyReport IS NULL */ select
            count(t1_0.id)>0 
        from
            tasks t1_0 
        where
            t1_0.task_name=? 
            and t1_0.task_type='ROUTINE' 
            and t1_0.weekly_report_id is null
2025-09-17 11:06:32 - 
    /* insert for
        com.weeklyreport.entity.Task */insert 
    into
        tasks (actual_results, budget, completion_date, created_at, due_date, expected_results, is_completed, is_overdue, personnel_assignment, priority, progress, project_phase_id, quantitative_metrics, report_section, result_difference_analysis, simple_project_id, start_date, stop_loss_point, task_name, task_template_id, task_type, timeline, updated_at, weekly_report_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.weeklyreport.entity.Task */insert 
    into
        tasks (actual_results, budget, completion_date, created_at, due_date, expected_results, is_completed, is_overdue, personnel_assignment, priority, progress, project_phase_id, quantitative_metrics, report_section, result_difference_analysis, simple_project_id, start_date, stop_loss_point, task_name, task_template_id, task_type, timeline, updated_at, weekly_report_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-17 11:06:32 - 
    select
        t1_0.id,
        t1_0.actual_results,
        t1_0.budget,
        t1_0.completion_date,
        t1_0.created_at,
        t1_0.due_date,
        t1_0.expected_results,
        t1_0.is_completed,
        t1_0.is_overdue,
        t1_0.personnel_assignment,
        t1_0.priority,
        t1_0.progress,
        t1_0.project_phase_id,
        t1_0.quantitative_metrics,
        t1_0.report_section,
        t1_0.result_difference_analysis,
        t1_0.simple_project_id,
        t1_0.start_date,
        t1_0.stop_loss_point,
        t1_0.task_name,
        t1_0.task_template_id,
        t1_0.task_type,
        t1_0.timeline,
        t1_0.updated_at,
        t1_0.weekly_report_id 
    from
        tasks t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.actual_results,
        t1_0.budget,
        t1_0.completion_date,
        t1_0.created_at,
        t1_0.due_date,
        t1_0.expected_results,
        t1_0.is_completed,
        t1_0.is_overdue,
        t1_0.personnel_assignment,
        t1_0.priority,
        t1_0.progress,
        t1_0.project_phase_id,
        t1_0.quantitative_metrics,
        t1_0.report_section,
        t1_0.result_difference_analysis,
        t1_0.simple_project_id,
        t1_0.start_date,
        t1_0.stop_loss_point,
        t1_0.task_name,
        t1_0.task_template_id,
        t1_0.task_type,
        t1_0.timeline,
        t1_0.updated_at,
        t1_0.weekly_report_id 
    from
        tasks t1_0 
    where
        t1_0.id=?
2025-09-17 11:06:32 - 
    /* update
        for com.weeklyreport.entity.Task */update tasks 
    set
        actual_results=?,
        budget=?,
        completion_date=?,
        due_date=?,
        expected_results=?,
        is_completed=?,
        is_overdue=?,
        personnel_assignment=?,
        priority=?,
        progress=?,
        project_phase_id=?,
        quantitative_metrics=?,
        report_section=?,
        result_difference_analysis=?,
        simple_project_id=?,
        start_date=?,
        stop_loss_point=?,
        task_name=?,
        task_template_id=?,
        task_type=?,
        timeline=?,
        updated_at=?,
        weekly_report_id=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.Task */update tasks 
    set
        actual_results=?,
        budget=?,
        completion_date=?,
        due_date=?,
        expected_results=?,
        is_completed=?,
        is_overdue=?,
        personnel_assignment=?,
        priority=?,
        progress=?,
        project_phase_id=?,
        quantitative_metrics=?,
        report_section=?,
        result_difference_analysis=?,
        simple_project_id=?,
        start_date=?,
        stop_loss_point=?,
        task_name=?,
        task_template_id=?,
        task_type=?,
        timeline=?,
        updated_at=?,
        weekly_report_id=? 
    where
        id=?
2025-09-17 11:06:32 - Routine task template created successfully with id: 1
2025-09-17 11:06:34 - Securing GET /tasks/routine/selectable
2025-09-17 11:06:34 - Processing authentication for request: /api/tasks/routine/selectable
2025-09-17 11:06:34 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:34 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:34 - Successfully authenticated user: manager1 for request: /api/tasks/routine/selectable
2025-09-17 11:06:34 - Secured GET /tasks/routine/selectable
2025-09-17 11:06:34 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.getSelectableRoutineTasks(); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:06:34 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.getSelectableRoutineTasks(); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:06:34 - Fetching selectable routine tasks
2025-09-17 11:06:34 - 
    /* SELECT
        DISTINCT t 
    FROM
        Task t 
    WHERE
        t.taskType = 'ROUTINE' 
        AND t.weeklyReport IS NULL 
    ORDER BY
        t.taskName ASC */ select
            distinct t1_0.id,
            t1_0.actual_results,
            t1_0.budget,
            t1_0.completion_date,
            t1_0.created_at,
            t1_0.due_date,
            t1_0.expected_results,
            t1_0.is_completed,
            t1_0.is_overdue,
            t1_0.personnel_assignment,
            t1_0.priority,
            t1_0.progress,
            t1_0.project_phase_id,
            t1_0.quantitative_metrics,
            t1_0.report_section,
            t1_0.result_difference_analysis,
            t1_0.simple_project_id,
            t1_0.start_date,
            t1_0.stop_loss_point,
            t1_0.task_name,
            t1_0.task_template_id,
            t1_0.task_type,
            t1_0.timeline,
            t1_0.updated_at,
            t1_0.weekly_report_id 
        from
            tasks t1_0 
        where
            t1_0.task_type='ROUTINE' 
            and t1_0.weekly_report_id is null 
        order by
            t1_0.task_name
Hibernate: 
    /* SELECT
        DISTINCT t 
    FROM
        Task t 
    WHERE
        t.taskType = 'ROUTINE' 
        AND t.weeklyReport IS NULL 
    ORDER BY
        t.taskName ASC */ select
            distinct t1_0.id,
            t1_0.actual_results,
            t1_0.budget,
            t1_0.completion_date,
            t1_0.created_at,
            t1_0.due_date,
            t1_0.expected_results,
            t1_0.is_completed,
            t1_0.is_overdue,
            t1_0.personnel_assignment,
            t1_0.priority,
            t1_0.progress,
            t1_0.project_phase_id,
            t1_0.quantitative_metrics,
            t1_0.report_section,
            t1_0.result_difference_analysis,
            t1_0.simple_project_id,
            t1_0.start_date,
            t1_0.stop_loss_point,
            t1_0.task_name,
            t1_0.task_template_id,
            t1_0.task_type,
            t1_0.timeline,
            t1_0.updated_at,
            t1_0.weekly_report_id 
        from
            tasks t1_0 
        where
            t1_0.task_type='ROUTINE' 
            and t1_0.weekly_report_id is null 
        order by
            t1_0.task_name
2025-09-17 11:06:34 - Retrieved 1 routine tasks for selection
2025-09-17 11:06:38 - Securing GET /task-templates
2025-09-17 11:06:38 - Processing authentication for request: /api/task-templates
2025-09-17 11:06:38 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:38 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:38 - Successfully authenticated user: manager1 for request: /api/task-templates
2025-09-17 11:06:38 - Secured GET /task-templates
2025-09-17 11:06:38 - Unexpected exception: No static resource task-templates. - Request: uri=/api/task-templates
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource task-templates.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.weeklyreport.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:72)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-09-17 11:06:42 - Securing GET /simple/projects/my?status=APPROVED
2025-09-17 11:06:42 - Processing authentication for request: /api/simple/projects/my
2025-09-17 11:06:42 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:42 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:42 - Successfully authenticated user: manager1 for request: /api/simple/projects/my
2025-09-17 11:06:42 - Secured GET /simple/projects/my?status=APPROVED
2025-09-17 11:06:42 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:06:42 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
        AND p.status = :status 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
            and sp1_0.status=? 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
        AND p.status = :status 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
            and sp1_0.status=? 
        order by
            sp1_0.created_at desc
2025-09-17 11:06:44 - Securing GET /project-phases/project/1/selectable
2025-09-17 11:06:44 - Processing authentication for request: /api/project-phases/project/1/selectable
2025-09-17 11:06:44 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:44 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:44 - Successfully authenticated user: manager1 for request: /api/project-phases/project/1/selectable
2025-09-17 11:06:44 - Secured GET /project-phases/project/1/selectable
2025-09-17 11:06:44 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getSelectablePhases(java.lang.Long,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:06:44 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getSelectablePhases(java.lang.Long,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 11:06:44 - 
    /* SELECT
        p 
    FROM
        ProjectPhase p 
    WHERE
        p.project.id = :projectId 
        AND p.status != :status 
    ORDER BY
        p.phaseOrder ASC */ select
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.key_indicators,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.project_id,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at 
        from
            project_phases pp1_0 
        where
            pp1_0.project_id=? 
            and pp1_0.status!=? 
        order by
            pp1_0.phase_order
Hibernate: 
    /* SELECT
        p 
    FROM
        ProjectPhase p 
    WHERE
        p.project.id = :projectId 
        AND p.status != :status 
    ORDER BY
        p.phaseOrder ASC */ select
            pp1_0.id,
            pp1_0.actual_results,
            pp1_0.assigned_members,
            pp1_0.completion_date,
            pp1_0.created_at,
            pp1_0.end_date,
            pp1_0.estimated_results,
            pp1_0.key_indicators,
            pp1_0.phase_description,
            pp1_0.phase_name,
            pp1_0.phase_order,
            pp1_0.project_id,
            pp1_0.start_date,
            pp1_0.status,
            pp1_0.timeline,
            pp1_0.updated_at 
        from
            project_phases pp1_0 
        where
            pp1_0.project_id=? 
            and pp1_0.status!=? 
        order by
            pp1_0.phase_order
2025-09-17 11:06:58 - Securing POST /reports
2025-09-17 11:06:58 - Processing authentication for request: /api/reports
2025-09-17 11:06:58 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:58 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:58 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:06:58 - Secured POST /reports
2025-09-17 11:06:58 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.createWeeklyReport(com.weeklyreport.dto.weeklyreport.WeeklyReportCreateRequest,boolean,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:06:58 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.createWeeklyReport(com.weeklyreport.dto.weeklyreport.WeeklyReportCreateRequest,boolean,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:06:58 - Creating new weekly report: 22 for user: 5
2025-09-17 11:06:58 - Creating new weekly report: 22 for user: 5, isDraft: false
2025-09-17 11:06:58 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:06:58 - 
    /* <criteria> */ select
        wr1_0.id 
    from
        weekly_reports wr1_0 
    where
        wr1_0.author_id=? 
        and wr1_0.report_week=? 
        and wr1_0.status!=? 
    limit
        ?
Hibernate: 
    /* <criteria> */ select
        wr1_0.id 
    from
        weekly_reports wr1_0 
    where
        wr1_0.author_id=? 
        and wr1_0.report_week=? 
        and wr1_0.status!=? 
    limit
        ?
2025-09-17 11:06:58 - 
    /* insert for
        com.weeklyreport.entity.WeeklyReport */insert 
    into
        weekly_reports (achievements, additional_notes, admin_review_comment, admin_reviewed_at, admin_reviewer_id, ai_analysis_result, ai_analyzed_at, ai_confidence, ai_key_issues, ai_processing_time_ms, ai_provider_used, ai_quality_score, ai_recommendations, ai_risk_level, author_id, challenges, content, created_at, is_late, manager_review_comment, manager_reviewed_at, manager_reviewer_id, next_week_plan, priority, report_week, review_comment, reviewed_at, reviewer_id, status, submitted_at, super_admin_review_comment, super_admin_reviewed_at, super_admin_reviewer_id, template_id, title, updated_at, week_number, word_count, work_summary, report_year) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.weeklyreport.entity.WeeklyReport */insert 
    into
        weekly_reports (achievements, additional_notes, admin_review_comment, admin_reviewed_at, admin_reviewer_id, ai_analysis_result, ai_analyzed_at, ai_confidence, ai_key_issues, ai_processing_time_ms, ai_provider_used, ai_quality_score, ai_recommendations, ai_risk_level, author_id, challenges, content, created_at, is_late, manager_review_comment, manager_reviewed_at, manager_reviewer_id, next_week_plan, priority, report_week, review_comment, reviewed_at, reviewer_id, status, submitted_at, super_admin_review_comment, super_admin_reviewed_at, super_admin_reviewer_id, template_id, title, updated_at, week_number, word_count, work_summary, report_year) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-17 11:06:58 - Weekly report created successfully with ID: 1
2025-09-17 11:06:58 - Weekly report created successfully with ID: 1
2025-09-17 11:06:58 - Securing POST /tasks/weekly-report/1
2025-09-17 11:06:58 - Processing authentication for request: /api/tasks/weekly-report/1
2025-09-17 11:06:58 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:58 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:58 - Successfully authenticated user: manager1 for request: /api/tasks/weekly-report/1
2025-09-17 11:06:58 - Secured POST /tasks/weekly-report/1
2025-09-17 11:06:58 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.createTask(java.lang.Long,com.weeklyreport.controller.TaskController$TaskCreateRequest); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:06:58 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.createTask(java.lang.Long,com.weeklyreport.controller.TaskController$TaskCreateRequest); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:06:58 - Creating task for weekly report: 1
2025-09-17 11:06:58 - 
    select
        wr1_0.id,
        wr1_0.achievements,
        wr1_0.additional_notes,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analysis_result,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.author_id,
        wr1_0.challenges,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.is_late,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.next_week_plan,
        wr1_0.priority,
        wr1_0.report_week,
        wr1_0.review_comment,
        wr1_0.reviewed_at,
        wr1_0.reviewer_id,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.week_number,
        wr1_0.word_count,
        wr1_0.work_summary,
        wr1_0.report_year 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
Hibernate: 
    select
        wr1_0.id,
        wr1_0.achievements,
        wr1_0.additional_notes,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analysis_result,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.author_id,
        wr1_0.challenges,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.is_late,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.next_week_plan,
        wr1_0.priority,
        wr1_0.report_week,
        wr1_0.review_comment,
        wr1_0.reviewed_at,
        wr1_0.reviewer_id,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.week_number,
        wr1_0.word_count,
        wr1_0.work_summary,
        wr1_0.report_year 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
2025-09-17 11:06:58 - 
    /* <criteria> */ select
        t1_0.id 
    from
        tasks t1_0 
    where
        t1_0.task_name=? 
        and t1_0.weekly_report_id=? 
    limit
        ?
Hibernate: 
    /* <criteria> */ select
        t1_0.id 
    from
        tasks t1_0 
    where
        t1_0.task_name=? 
        and t1_0.weekly_report_id=? 
    limit
        ?
2025-09-17 11:06:58 - 
    /* insert for
        com.weeklyreport.entity.Task */insert 
    into
        tasks (actual_results, budget, completion_date, created_at, due_date, expected_results, is_completed, is_overdue, personnel_assignment, priority, progress, project_phase_id, quantitative_metrics, report_section, result_difference_analysis, simple_project_id, start_date, stop_loss_point, task_name, task_template_id, task_type, timeline, updated_at, weekly_report_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.weeklyreport.entity.Task */insert 
    into
        tasks (actual_results, budget, completion_date, created_at, due_date, expected_results, is_completed, is_overdue, personnel_assignment, priority, progress, project_phase_id, quantitative_metrics, report_section, result_difference_analysis, simple_project_id, start_date, stop_loss_point, task_name, task_template_id, task_type, timeline, updated_at, weekly_report_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-17 11:06:58 - 
    select
        t1_0.id,
        t1_0.actual_results,
        t1_0.budget,
        t1_0.completion_date,
        t1_0.created_at,
        t1_0.due_date,
        t1_0.expected_results,
        t1_0.is_completed,
        t1_0.is_overdue,
        t1_0.personnel_assignment,
        t1_0.priority,
        t1_0.progress,
        t1_0.project_phase_id,
        t1_0.quantitative_metrics,
        t1_0.report_section,
        t1_0.result_difference_analysis,
        t1_0.simple_project_id,
        t1_0.start_date,
        t1_0.stop_loss_point,
        t1_0.task_name,
        t1_0.task_template_id,
        t1_0.task_type,
        t1_0.timeline,
        t1_0.updated_at,
        t1_0.weekly_report_id 
    from
        tasks t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.actual_results,
        t1_0.budget,
        t1_0.completion_date,
        t1_0.created_at,
        t1_0.due_date,
        t1_0.expected_results,
        t1_0.is_completed,
        t1_0.is_overdue,
        t1_0.personnel_assignment,
        t1_0.priority,
        t1_0.progress,
        t1_0.project_phase_id,
        t1_0.quantitative_metrics,
        t1_0.report_section,
        t1_0.result_difference_analysis,
        t1_0.simple_project_id,
        t1_0.start_date,
        t1_0.stop_loss_point,
        t1_0.task_name,
        t1_0.task_template_id,
        t1_0.task_type,
        t1_0.timeline,
        t1_0.updated_at,
        t1_0.weekly_report_id 
    from
        tasks t1_0 
    where
        t1_0.id=?
2025-09-17 11:06:58 - 
    /* update
        for com.weeklyreport.entity.Task */update tasks 
    set
        actual_results=?,
        budget=?,
        completion_date=?,
        due_date=?,
        expected_results=?,
        is_completed=?,
        is_overdue=?,
        personnel_assignment=?,
        priority=?,
        progress=?,
        project_phase_id=?,
        quantitative_metrics=?,
        report_section=?,
        result_difference_analysis=?,
        simple_project_id=?,
        start_date=?,
        stop_loss_point=?,
        task_name=?,
        task_template_id=?,
        task_type=?,
        timeline=?,
        updated_at=?,
        weekly_report_id=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.Task */update tasks 
    set
        actual_results=?,
        budget=?,
        completion_date=?,
        due_date=?,
        expected_results=?,
        is_completed=?,
        is_overdue=?,
        personnel_assignment=?,
        priority=?,
        progress=?,
        project_phase_id=?,
        quantitative_metrics=?,
        report_section=?,
        result_difference_analysis=?,
        simple_project_id=?,
        start_date=?,
        stop_loss_point=?,
        task_name=?,
        task_template_id=?,
        task_type=?,
        timeline=?,
        updated_at=?,
        weekly_report_id=? 
    where
        id=?
2025-09-17 11:06:58 - Task created successfully with id: 2
2025-09-17 11:06:58 - Securing POST /reports/1/submit
2025-09-17 11:06:58 - Processing authentication for request: /api/reports/1/submit
2025-09-17 11:06:58 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:06:58 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:06:58 - Successfully authenticated user: manager1 for request: /api/reports/1/submit
2025-09-17 11:06:58 - Secured POST /reports/1/submit
2025-09-17 11:06:58 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.submitWeeklyReport(java.lang.Long,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:06:58 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.submitWeeklyReport(java.lang.Long,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:06:58 - Submitting weekly report: 1 by user: 5
2025-09-17 11:06:58 - Submitting weekly report: 1 by user: 5
2025-09-17 11:06:58 - 
    select
        wr1_0.id,
        wr1_0.achievements,
        wr1_0.additional_notes,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analysis_result,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.author_id,
        wr1_0.challenges,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.is_late,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.next_week_plan,
        wr1_0.priority,
        wr1_0.report_week,
        wr1_0.review_comment,
        wr1_0.reviewed_at,
        wr1_0.reviewer_id,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.week_number,
        wr1_0.word_count,
        wr1_0.work_summary,
        wr1_0.report_year 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
Hibernate: 
    select
        wr1_0.id,
        wr1_0.achievements,
        wr1_0.additional_notes,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analysis_result,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.author_id,
        wr1_0.challenges,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.is_late,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.next_week_plan,
        wr1_0.priority,
        wr1_0.report_week,
        wr1_0.review_comment,
        wr1_0.reviewed_at,
        wr1_0.reviewer_id,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.week_number,
        wr1_0.word_count,
        wr1_0.work_summary,
        wr1_0.report_year 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
2025-09-17 11:06:58 - 
    /* <criteria> */ select
        wr1_0.id 
    from
        weekly_reports wr1_0 
    where
        wr1_0.author_id=? 
        and wr1_0.report_week=? 
        and wr1_0.status!=? 
        and wr1_0.id!=? 
    limit
        ?
Hibernate: 
    /* <criteria> */ select
        wr1_0.id 
    from
        weekly_reports wr1_0 
    where
        wr1_0.author_id=? 
        and wr1_0.report_week=? 
        and wr1_0.status!=? 
        and wr1_0.id!=? 
    limit
        ?
2025-09-17 11:06:58 - Weekly report submitted successfully: 1
2025-09-17 11:06:58 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:06:58 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id=? 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id=? 
    order by
        c1_0.created_at
2025-09-17 11:06:58 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id=? 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id=? 
    order by
        ar1_0.created_at desc
2025-09-17 11:06:58 - 
    /* update
        for com.weeklyreport.entity.WeeklyReport */update weekly_reports 
    set
        achievements=?,
        additional_notes=?,
        admin_review_comment=?,
        admin_reviewed_at=?,
        admin_reviewer_id=?,
        ai_analysis_result=?,
        ai_analyzed_at=?,
        ai_confidence=?,
        ai_key_issues=?,
        ai_processing_time_ms=?,
        ai_provider_used=?,
        ai_quality_score=?,
        ai_recommendations=?,
        ai_risk_level=?,
        author_id=?,
        challenges=?,
        content=?,
        is_late=?,
        manager_review_comment=?,
        manager_reviewed_at=?,
        manager_reviewer_id=?,
        next_week_plan=?,
        priority=?,
        report_week=?,
        review_comment=?,
        reviewed_at=?,
        reviewer_id=?,
        status=?,
        submitted_at=?,
        super_admin_review_comment=?,
        super_admin_reviewed_at=?,
        super_admin_reviewer_id=?,
        template_id=?,
        title=?,
        updated_at=?,
        week_number=?,
        word_count=?,
        work_summary=?,
        report_year=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.WeeklyReport */update weekly_reports 
    set
        achievements=?,
        additional_notes=?,
        admin_review_comment=?,
        admin_reviewed_at=?,
        admin_reviewer_id=?,
        ai_analysis_result=?,
        ai_analyzed_at=?,
        ai_confidence=?,
        ai_key_issues=?,
        ai_processing_time_ms=?,
        ai_provider_used=?,
        ai_quality_score=?,
        ai_recommendations=?,
        ai_risk_level=?,
        author_id=?,
        challenges=?,
        content=?,
        is_late=?,
        manager_review_comment=?,
        manager_reviewed_at=?,
        manager_reviewer_id=?,
        next_week_plan=?,
        priority=?,
        report_week=?,
        review_comment=?,
        reviewed_at=?,
        reviewer_id=?,
        status=?,
        submitted_at=?,
        super_admin_review_comment=?,
        super_admin_reviewed_at=?,
        super_admin_reviewer_id=?,
        template_id=?,
        title=?,
        updated_at=?,
        week_number=?,
        word_count=?,
        work_summary=?,
        report_year=? 
    where
        id=?
2025-09-17 11:06:58 - HHH100503: On release of batch it still contained JDBC statements
2025-09-17 11:06:58 - HHH100501: Exception executing batch [java.sql.BatchUpdateException: Data truncated for column 'status' at row 1], SQL: /* update for com.weeklyreport.entity.WeeklyReport */update weekly_reports set achievements=?,additional_notes=?,admin_review_comment=?,admin_reviewed_at=?,admin_reviewer_id=?,ai_analysis_result=?,ai_analyzed_at=?,ai_confidence=?,ai_key_issues=?,ai_processing_time_ms=?,ai_provider_used=?,ai_quality_score=?,ai_recommendations=?,ai_risk_level=?,author_id=?,challenges=?,content=?,is_late=?,manager_review_comment=?,manager_reviewed_at=?,manager_reviewer_id=?,next_week_plan=?,priority=?,report_week=?,review_comment=?,reviewed_at=?,reviewer_id=?,status=?,submitted_at=?,super_admin_review_comment=?,super_admin_reviewed_at=?,super_admin_reviewer_id=?,template_id=?,title=?,updated_at=?,week_number=?,word_count=?,work_summary=?,report_year=? where id=?
2025-09-17 11:06:58 - SQL Error: 1265, SQLState: 01000
2025-09-17 11:06:58 - Data truncated for column 'status' at row 1
2025-09-17 11:06:58 - Weekly report submission error - could not execute batch [Data truncated for column 'status' at row 1] [/* update for com.weeklyreport.entity.WeeklyReport */update weekly_reports set achievements=?,additional_notes=?,admin_review_comment=?,admin_reviewed_at=?,admin_reviewer_id=?,ai_analysis_result=?,ai_analyzed_at=?,ai_confidence=?,ai_key_issues=?,ai_processing_time_ms=?,ai_provider_used=?,ai_quality_score=?,ai_recommendations=?,ai_risk_level=?,author_id=?,challenges=?,content=?,is_late=?,manager_review_comment=?,manager_reviewed_at=?,manager_reviewer_id=?,next_week_plan=?,priority=?,report_week=?,review_comment=?,reviewed_at=?,reviewer_id=?,status=?,submitted_at=?,super_admin_review_comment=?,super_admin_reviewed_at=?,super_admin_reviewer_id=?,template_id=?,title=?,updated_at=?,week_number=?,word_count=?,work_summary=?,report_year=? where id=?]
org.springframework.orm.jpa.JpaSystemException: could not execute batch [Data truncated for column 'status' at row 1] [/* update for com.weeklyreport.entity.WeeklyReport */update weekly_reports set achievements=?,additional_notes=?,admin_review_comment=?,admin_reviewed_at=?,admin_reviewer_id=?,ai_analysis_result=?,ai_analyzed_at=?,ai_confidence=?,ai_key_issues=?,ai_processing_time_ms=?,ai_provider_used=?,ai_quality_score=?,ai_recommendations=?,ai_risk_level=?,author_id=?,challenges=?,content=?,is_late=?,manager_review_comment=?,manager_reviewed_at=?,manager_reviewer_id=?,next_week_plan=?,priority=?,report_week=?,review_comment=?,reviewed_at=?,reviewer_id=?,status=?,submitted_at=?,super_admin_review_comment=?,super_admin_reviewed_at=?,super_admin_reviewer_id=?,template_id=?,title=?,updated_at=?,week_number=?,word_count=?,work_summary=?,report_year=? where id=?]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:341)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:565)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:794)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.weeklyreport.service.WeeklyReportService$$SpringCGLIB$$0.submitWeeklyReport(<generated>)
	at com.weeklyreport.controller.WeeklyReportController.submitWeeklyReport(WeeklyReportController.java:220)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.weeklyreport.controller.WeeklyReportController$$SpringCGLIB$$0.submitWeeklyReport(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.weeklyreport.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:72)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: org.hibernate.exception.GenericJDBCException: could not execute batch [Data truncated for column 'status' at row 1] [/* update for com.weeklyreport.entity.WeeklyReport */update weekly_reports set achievements=?,additional_notes=?,admin_review_comment=?,admin_reviewed_at=?,admin_reviewer_id=?,ai_analysis_result=?,ai_analyzed_at=?,ai_confidence=?,ai_key_issues=?,ai_processing_time_ms=?,ai_provider_used=?,ai_quality_score=?,ai_recommendations=?,ai_risk_level=?,author_id=?,challenges=?,content=?,is_late=?,manager_review_comment=?,manager_reviewed_at=?,manager_reviewer_id=?,next_week_plan=?,priority=?,report_week=?,review_comment=?,reviewed_at=?,reviewer_id=?,status=?,submitted_at=?,super_admin_review_comment=?,super_admin_reviewed_at=?,super_admin_reviewer_id=?,template_id=?,title=?,updated_at=?,week_number=?,word_count=?,work_summary=?,report_year=? where id=?]
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:63)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.lambda$performExecution$2(BatchImpl.java:287)
	at org.hibernate.engine.jdbc.mutation.internal.PreparedStatementGroupSingleTable.forEachStatement(PreparedStatementGroupSingleTable.java:59)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.performExecution(BatchImpl.java:260)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.execute(BatchImpl.java:239)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.executeBatch(JdbcCoordinatorImpl.java:188)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:659)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:498)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:363)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1415)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:496)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2325)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1988)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:561)
	... 150 common frames omitted
Caused by: java.sql.BatchUpdateException: Data truncated for column 'status' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ServerPreparedStatement.executeBatchSerially(ServerPreparedStatement.java:307)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.lambda$performExecution$2(BatchImpl.java:273)
	... 168 common frames omitted
Caused by: java.sql.SQLException: Data truncated for column 'status' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ServerPreparedStatement.serverExecute(ServerPreparedStatement.java:555)
	at com.mysql.cj.jdbc.ServerPreparedStatement.executeInternal(ServerPreparedStatement.java:339)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1009)
	at com.mysql.cj.jdbc.ServerPreparedStatement.executeBatchSerially(ServerPreparedStatement.java:279)
	... 173 common frames omitted
2025-09-17 11:07:17 - Securing POST /reports
2025-09-17 11:07:17 - Processing authentication for request: /api/reports
2025-09-17 11:07:17 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:07:17 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:07:17 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 11:07:17 - Secured POST /reports
2025-09-17 11:07:17 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.createWeeklyReport(com.weeklyreport.dto.weeklyreport.WeeklyReportCreateRequest,boolean,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:07:17 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.createWeeklyReport(com.weeklyreport.dto.weeklyreport.WeeklyReportCreateRequest,boolean,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:07:17 - Creating new weekly report: 22 for user: 5
2025-09-17 11:07:17 - Creating new weekly report: 22 for user: 5, isDraft: false
2025-09-17 11:07:17 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:07:17 - 
    /* <criteria> */ select
        wr1_0.id 
    from
        weekly_reports wr1_0 
    where
        wr1_0.author_id=? 
        and wr1_0.report_week=? 
        and wr1_0.status!=? 
    limit
        ?
Hibernate: 
    /* <criteria> */ select
        wr1_0.id 
    from
        weekly_reports wr1_0 
    where
        wr1_0.author_id=? 
        and wr1_0.report_week=? 
        and wr1_0.status!=? 
    limit
        ?
2025-09-17 11:07:17 - 
    /* insert for
        com.weeklyreport.entity.WeeklyReport */insert 
    into
        weekly_reports (achievements, additional_notes, admin_review_comment, admin_reviewed_at, admin_reviewer_id, ai_analysis_result, ai_analyzed_at, ai_confidence, ai_key_issues, ai_processing_time_ms, ai_provider_used, ai_quality_score, ai_recommendations, ai_risk_level, author_id, challenges, content, created_at, is_late, manager_review_comment, manager_reviewed_at, manager_reviewer_id, next_week_plan, priority, report_week, review_comment, reviewed_at, reviewer_id, status, submitted_at, super_admin_review_comment, super_admin_reviewed_at, super_admin_reviewer_id, template_id, title, updated_at, week_number, word_count, work_summary, report_year) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.weeklyreport.entity.WeeklyReport */insert 
    into
        weekly_reports (achievements, additional_notes, admin_review_comment, admin_reviewed_at, admin_reviewer_id, ai_analysis_result, ai_analyzed_at, ai_confidence, ai_key_issues, ai_processing_time_ms, ai_provider_used, ai_quality_score, ai_recommendations, ai_risk_level, author_id, challenges, content, created_at, is_late, manager_review_comment, manager_reviewed_at, manager_reviewer_id, next_week_plan, priority, report_week, review_comment, reviewed_at, reviewer_id, status, submitted_at, super_admin_review_comment, super_admin_reviewed_at, super_admin_reviewer_id, template_id, title, updated_at, week_number, word_count, work_summary, report_year) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-17 11:07:17 - Weekly report created successfully with ID: 2
2025-09-17 11:07:17 - Weekly report created successfully with ID: 2
2025-09-17 11:07:17 - Securing POST /tasks/weekly-report/2
2025-09-17 11:07:17 - Processing authentication for request: /api/tasks/weekly-report/2
2025-09-17 11:07:17 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:07:17 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:07:17 - Successfully authenticated user: manager1 for request: /api/tasks/weekly-report/2
2025-09-17 11:07:17 - Secured POST /tasks/weekly-report/2
2025-09-17 11:07:17 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.createTask(java.lang.Long,com.weeklyreport.controller.TaskController$TaskCreateRequest); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:07:17 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.TaskController.createTask(java.lang.Long,com.weeklyreport.controller.TaskController$TaskCreateRequest); target is of class [com.weeklyreport.controller.TaskController]
2025-09-17 11:07:17 - Creating task for weekly report: 2
2025-09-17 11:07:17 - 
    select
        wr1_0.id,
        wr1_0.achievements,
        wr1_0.additional_notes,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analysis_result,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.author_id,
        wr1_0.challenges,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.is_late,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.next_week_plan,
        wr1_0.priority,
        wr1_0.report_week,
        wr1_0.review_comment,
        wr1_0.reviewed_at,
        wr1_0.reviewer_id,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.week_number,
        wr1_0.word_count,
        wr1_0.work_summary,
        wr1_0.report_year 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
Hibernate: 
    select
        wr1_0.id,
        wr1_0.achievements,
        wr1_0.additional_notes,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analysis_result,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.author_id,
        wr1_0.challenges,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.is_late,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.next_week_plan,
        wr1_0.priority,
        wr1_0.report_week,
        wr1_0.review_comment,
        wr1_0.reviewed_at,
        wr1_0.reviewer_id,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.week_number,
        wr1_0.word_count,
        wr1_0.work_summary,
        wr1_0.report_year 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
2025-09-17 11:07:17 - 
    /* <criteria> */ select
        t1_0.id 
    from
        tasks t1_0 
    where
        t1_0.task_name=? 
        and t1_0.weekly_report_id=? 
    limit
        ?
Hibernate: 
    /* <criteria> */ select
        t1_0.id 
    from
        tasks t1_0 
    where
        t1_0.task_name=? 
        and t1_0.weekly_report_id=? 
    limit
        ?
2025-09-17 11:07:17 - 
    /* insert for
        com.weeklyreport.entity.Task */insert 
    into
        tasks (actual_results, budget, completion_date, created_at, due_date, expected_results, is_completed, is_overdue, personnel_assignment, priority, progress, project_phase_id, quantitative_metrics, report_section, result_difference_analysis, simple_project_id, start_date, stop_loss_point, task_name, task_template_id, task_type, timeline, updated_at, weekly_report_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.weeklyreport.entity.Task */insert 
    into
        tasks (actual_results, budget, completion_date, created_at, due_date, expected_results, is_completed, is_overdue, personnel_assignment, priority, progress, project_phase_id, quantitative_metrics, report_section, result_difference_analysis, simple_project_id, start_date, stop_loss_point, task_name, task_template_id, task_type, timeline, updated_at, weekly_report_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-17 11:07:17 - 
    select
        t1_0.id,
        t1_0.actual_results,
        t1_0.budget,
        t1_0.completion_date,
        t1_0.created_at,
        t1_0.due_date,
        t1_0.expected_results,
        t1_0.is_completed,
        t1_0.is_overdue,
        t1_0.personnel_assignment,
        t1_0.priority,
        t1_0.progress,
        t1_0.project_phase_id,
        t1_0.quantitative_metrics,
        t1_0.report_section,
        t1_0.result_difference_analysis,
        t1_0.simple_project_id,
        t1_0.start_date,
        t1_0.stop_loss_point,
        t1_0.task_name,
        t1_0.task_template_id,
        t1_0.task_type,
        t1_0.timeline,
        t1_0.updated_at,
        t1_0.weekly_report_id 
    from
        tasks t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.actual_results,
        t1_0.budget,
        t1_0.completion_date,
        t1_0.created_at,
        t1_0.due_date,
        t1_0.expected_results,
        t1_0.is_completed,
        t1_0.is_overdue,
        t1_0.personnel_assignment,
        t1_0.priority,
        t1_0.progress,
        t1_0.project_phase_id,
        t1_0.quantitative_metrics,
        t1_0.report_section,
        t1_0.result_difference_analysis,
        t1_0.simple_project_id,
        t1_0.start_date,
        t1_0.stop_loss_point,
        t1_0.task_name,
        t1_0.task_template_id,
        t1_0.task_type,
        t1_0.timeline,
        t1_0.updated_at,
        t1_0.weekly_report_id 
    from
        tasks t1_0 
    where
        t1_0.id=?
2025-09-17 11:07:17 - 
    /* update
        for com.weeklyreport.entity.Task */update tasks 
    set
        actual_results=?,
        budget=?,
        completion_date=?,
        due_date=?,
        expected_results=?,
        is_completed=?,
        is_overdue=?,
        personnel_assignment=?,
        priority=?,
        progress=?,
        project_phase_id=?,
        quantitative_metrics=?,
        report_section=?,
        result_difference_analysis=?,
        simple_project_id=?,
        start_date=?,
        stop_loss_point=?,
        task_name=?,
        task_template_id=?,
        task_type=?,
        timeline=?,
        updated_at=?,
        weekly_report_id=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.Task */update tasks 
    set
        actual_results=?,
        budget=?,
        completion_date=?,
        due_date=?,
        expected_results=?,
        is_completed=?,
        is_overdue=?,
        personnel_assignment=?,
        priority=?,
        progress=?,
        project_phase_id=?,
        quantitative_metrics=?,
        report_section=?,
        result_difference_analysis=?,
        simple_project_id=?,
        start_date=?,
        stop_loss_point=?,
        task_name=?,
        task_template_id=?,
        task_type=?,
        timeline=?,
        updated_at=?,
        weekly_report_id=? 
    where
        id=?
2025-09-17 11:07:17 - Task created successfully with id: 3
2025-09-17 11:07:17 - Securing POST /reports/2/submit
2025-09-17 11:07:17 - Processing authentication for request: /api/reports/2/submit
2025-09-17 11:07:17 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 11:07:17 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 11:07:17 - Successfully authenticated user: manager1 for request: /api/reports/2/submit
2025-09-17 11:07:17 - Secured POST /reports/2/submit
2025-09-17 11:07:17 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.submitWeeklyReport(java.lang.Long,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:07:17 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.submitWeeklyReport(java.lang.Long,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 11:07:17 - Submitting weekly report: 2 by user: 5
2025-09-17 11:07:17 - Submitting weekly report: 2 by user: 5
2025-09-17 11:07:17 - 
    select
        wr1_0.id,
        wr1_0.achievements,
        wr1_0.additional_notes,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analysis_result,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.author_id,
        wr1_0.challenges,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.is_late,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.next_week_plan,
        wr1_0.priority,
        wr1_0.report_week,
        wr1_0.review_comment,
        wr1_0.reviewed_at,
        wr1_0.reviewer_id,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.week_number,
        wr1_0.word_count,
        wr1_0.work_summary,
        wr1_0.report_year 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
Hibernate: 
    select
        wr1_0.id,
        wr1_0.achievements,
        wr1_0.additional_notes,
        wr1_0.admin_review_comment,
        wr1_0.admin_reviewed_at,
        wr1_0.admin_reviewer_id,
        wr1_0.ai_analysis_result,
        wr1_0.ai_analyzed_at,
        wr1_0.ai_confidence,
        wr1_0.ai_key_issues,
        wr1_0.ai_processing_time_ms,
        wr1_0.ai_provider_used,
        wr1_0.ai_quality_score,
        wr1_0.ai_recommendations,
        wr1_0.ai_risk_level,
        wr1_0.author_id,
        wr1_0.challenges,
        wr1_0.content,
        wr1_0.created_at,
        wr1_0.is_late,
        wr1_0.manager_review_comment,
        wr1_0.manager_reviewed_at,
        wr1_0.manager_reviewer_id,
        wr1_0.next_week_plan,
        wr1_0.priority,
        wr1_0.report_week,
        wr1_0.review_comment,
        wr1_0.reviewed_at,
        wr1_0.reviewer_id,
        wr1_0.status,
        wr1_0.submitted_at,
        wr1_0.super_admin_review_comment,
        wr1_0.super_admin_reviewed_at,
        wr1_0.super_admin_reviewer_id,
        wr1_0.template_id,
        wr1_0.title,
        wr1_0.updated_at,
        wr1_0.week_number,
        wr1_0.word_count,
        wr1_0.work_summary,
        wr1_0.report_year 
    from
        weekly_reports wr1_0 
    where
        wr1_0.id=?
2025-09-17 11:07:17 - 
    /* <criteria> */ select
        wr1_0.id 
    from
        weekly_reports wr1_0 
    where
        wr1_0.author_id=? 
        and wr1_0.report_week=? 
        and wr1_0.status!=? 
        and wr1_0.id!=? 
    limit
        ?
Hibernate: 
    /* <criteria> */ select
        wr1_0.id 
    from
        weekly_reports wr1_0 
    where
        wr1_0.author_id=? 
        and wr1_0.report_week=? 
        and wr1_0.status!=? 
        and wr1_0.id!=? 
    limit
        ?
2025-09-17 11:07:17 - Weekly report submitted successfully: 2
2025-09-17 11:07:17 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 11:07:17 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id=? 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id=? 
    order by
        c1_0.created_at
2025-09-17 11:07:17 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id=? 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id=? 
    order by
        ar1_0.created_at desc
2025-09-17 11:07:17 - 
    /* update
        for com.weeklyreport.entity.WeeklyReport */update weekly_reports 
    set
        achievements=?,
        additional_notes=?,
        admin_review_comment=?,
        admin_reviewed_at=?,
        admin_reviewer_id=?,
        ai_analysis_result=?,
        ai_analyzed_at=?,
        ai_confidence=?,
        ai_key_issues=?,
        ai_processing_time_ms=?,
        ai_provider_used=?,
        ai_quality_score=?,
        ai_recommendations=?,
        ai_risk_level=?,
        author_id=?,
        challenges=?,
        content=?,
        is_late=?,
        manager_review_comment=?,
        manager_reviewed_at=?,
        manager_reviewer_id=?,
        next_week_plan=?,
        priority=?,
        report_week=?,
        review_comment=?,
        reviewed_at=?,
        reviewer_id=?,
        status=?,
        submitted_at=?,
        super_admin_review_comment=?,
        super_admin_reviewed_at=?,
        super_admin_reviewer_id=?,
        template_id=?,
        title=?,
        updated_at=?,
        week_number=?,
        word_count=?,
        work_summary=?,
        report_year=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.WeeklyReport */update weekly_reports 
    set
        achievements=?,
        additional_notes=?,
        admin_review_comment=?,
        admin_reviewed_at=?,
        admin_reviewer_id=?,
        ai_analysis_result=?,
        ai_analyzed_at=?,
        ai_confidence=?,
        ai_key_issues=?,
        ai_processing_time_ms=?,
        ai_provider_used=?,
        ai_quality_score=?,
        ai_recommendations=?,
        ai_risk_level=?,
        author_id=?,
        challenges=?,
        content=?,
        is_late=?,
        manager_review_comment=?,
        manager_reviewed_at=?,
        manager_reviewer_id=?,
        next_week_plan=?,
        priority=?,
        report_week=?,
        review_comment=?,
        reviewed_at=?,
        reviewer_id=?,
        status=?,
        submitted_at=?,
        super_admin_review_comment=?,
        super_admin_reviewed_at=?,
        super_admin_reviewer_id=?,
        template_id=?,
        title=?,
        updated_at=?,
        week_number=?,
        word_count=?,
        work_summary=?,
        report_year=? 
    where
        id=?
2025-09-17 11:07:17 - HHH100503: On release of batch it still contained JDBC statements
2025-09-17 11:07:17 - HHH100501: Exception executing batch [java.sql.BatchUpdateException: Data truncated for column 'status' at row 1], SQL: /* update for com.weeklyreport.entity.WeeklyReport */update weekly_reports set achievements=?,additional_notes=?,admin_review_comment=?,admin_reviewed_at=?,admin_reviewer_id=?,ai_analysis_result=?,ai_analyzed_at=?,ai_confidence=?,ai_key_issues=?,ai_processing_time_ms=?,ai_provider_used=?,ai_quality_score=?,ai_recommendations=?,ai_risk_level=?,author_id=?,challenges=?,content=?,is_late=?,manager_review_comment=?,manager_reviewed_at=?,manager_reviewer_id=?,next_week_plan=?,priority=?,report_week=?,review_comment=?,reviewed_at=?,reviewer_id=?,status=?,submitted_at=?,super_admin_review_comment=?,super_admin_reviewed_at=?,super_admin_reviewer_id=?,template_id=?,title=?,updated_at=?,week_number=?,word_count=?,work_summary=?,report_year=? where id=?
2025-09-17 11:07:17 - SQL Error: 1265, SQLState: 01000
2025-09-17 11:07:17 - Data truncated for column 'status' at row 1
2025-09-17 11:07:17 - Weekly report submission error - could not execute batch [Data truncated for column 'status' at row 1] [/* update for com.weeklyreport.entity.WeeklyReport */update weekly_reports set achievements=?,additional_notes=?,admin_review_comment=?,admin_reviewed_at=?,admin_reviewer_id=?,ai_analysis_result=?,ai_analyzed_at=?,ai_confidence=?,ai_key_issues=?,ai_processing_time_ms=?,ai_provider_used=?,ai_quality_score=?,ai_recommendations=?,ai_risk_level=?,author_id=?,challenges=?,content=?,is_late=?,manager_review_comment=?,manager_reviewed_at=?,manager_reviewer_id=?,next_week_plan=?,priority=?,report_week=?,review_comment=?,reviewed_at=?,reviewer_id=?,status=?,submitted_at=?,super_admin_review_comment=?,super_admin_reviewed_at=?,super_admin_reviewer_id=?,template_id=?,title=?,updated_at=?,week_number=?,word_count=?,work_summary=?,report_year=? where id=?]
org.springframework.orm.jpa.JpaSystemException: could not execute batch [Data truncated for column 'status' at row 1] [/* update for com.weeklyreport.entity.WeeklyReport */update weekly_reports set achievements=?,additional_notes=?,admin_review_comment=?,admin_reviewed_at=?,admin_reviewer_id=?,ai_analysis_result=?,ai_analyzed_at=?,ai_confidence=?,ai_key_issues=?,ai_processing_time_ms=?,ai_provider_used=?,ai_quality_score=?,ai_recommendations=?,ai_risk_level=?,author_id=?,challenges=?,content=?,is_late=?,manager_review_comment=?,manager_reviewed_at=?,manager_reviewer_id=?,next_week_plan=?,priority=?,report_week=?,review_comment=?,reviewed_at=?,reviewer_id=?,status=?,submitted_at=?,super_admin_review_comment=?,super_admin_reviewed_at=?,super_admin_reviewer_id=?,template_id=?,title=?,updated_at=?,week_number=?,word_count=?,work_summary=?,report_year=? where id=?]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:341)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:565)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:794)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.weeklyreport.service.WeeklyReportService$$SpringCGLIB$$0.submitWeeklyReport(<generated>)
	at com.weeklyreport.controller.WeeklyReportController.submitWeeklyReport(WeeklyReportController.java:220)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.weeklyreport.controller.WeeklyReportController$$SpringCGLIB$$0.submitWeeklyReport(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.weeklyreport.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:72)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: org.hibernate.exception.GenericJDBCException: could not execute batch [Data truncated for column 'status' at row 1] [/* update for com.weeklyreport.entity.WeeklyReport */update weekly_reports set achievements=?,additional_notes=?,admin_review_comment=?,admin_reviewed_at=?,admin_reviewer_id=?,ai_analysis_result=?,ai_analyzed_at=?,ai_confidence=?,ai_key_issues=?,ai_processing_time_ms=?,ai_provider_used=?,ai_quality_score=?,ai_recommendations=?,ai_risk_level=?,author_id=?,challenges=?,content=?,is_late=?,manager_review_comment=?,manager_reviewed_at=?,manager_reviewer_id=?,next_week_plan=?,priority=?,report_week=?,review_comment=?,reviewed_at=?,reviewer_id=?,status=?,submitted_at=?,super_admin_review_comment=?,super_admin_reviewed_at=?,super_admin_reviewer_id=?,template_id=?,title=?,updated_at=?,week_number=?,word_count=?,work_summary=?,report_year=? where id=?]
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:63)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.lambda$performExecution$2(BatchImpl.java:287)
	at org.hibernate.engine.jdbc.mutation.internal.PreparedStatementGroupSingleTable.forEachStatement(PreparedStatementGroupSingleTable.java:59)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.performExecution(BatchImpl.java:260)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.execute(BatchImpl.java:239)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.executeBatch(JdbcCoordinatorImpl.java:188)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:659)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:498)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:363)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1415)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:496)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2325)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1988)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:561)
	... 150 common frames omitted
Caused by: java.sql.BatchUpdateException: Data truncated for column 'status' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createBatchUpdateException(SQLError.java:224)
	at com.mysql.cj.jdbc.ServerPreparedStatement.executeBatchSerially(ServerPreparedStatement.java:307)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchInternal(ClientPreparedStatement.java:418)
	at com.mysql.cj.jdbc.StatementImpl.executeBatch(StatementImpl.java:795)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.lambda$performExecution$2(BatchImpl.java:273)
	... 168 common frames omitted
Caused by: java.sql.SQLException: Data truncated for column 'status' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ServerPreparedStatement.serverExecute(ServerPreparedStatement.java:555)
	at com.mysql.cj.jdbc.ServerPreparedStatement.executeInternal(ServerPreparedStatement.java:339)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1061)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1009)
	at com.mysql.cj.jdbc.ServerPreparedStatement.executeBatchSerially(ServerPreparedStatement.java:279)
	... 173 common frames omitted
2025-09-17 11:09:21 - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-17 11:09:21 - WeeklyReportHikariCP-Dev - Shutdown initiated...
2025-09-17 11:09:21 - WeeklyReportHikariCP-Dev - Shutdown completed.
