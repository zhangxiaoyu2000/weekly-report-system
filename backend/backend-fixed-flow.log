[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------< com.weeklyreport:weekly-report-backend >---------------
[INFO] Building weekly-report-backend 0.0.1-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot:3.2.0:run (default-cli) > test-compile @ weekly-report-backend >>>
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ weekly-report-backend ---
[INFO] Copying 1 resource from src/main/resources to target/classes
[INFO] Copying 13 resources from src/main/resources to target/classes
[INFO] 
[INFO] --- compiler:3.11.0:compile (default-compile) @ weekly-report-backend ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ weekly-report-backend ---
[INFO] skip non existing resourceDirectory /Volumes/project/my-project/backend/src/test/resources
[INFO] 
[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ weekly-report-backend ---
[INFO] No sources to compile
[INFO] 
[INFO] <<< spring-boot:3.2.0:run (default-cli) < test-compile @ weekly-report-backend <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot:3.2.0:run (default-cli) @ weekly-report-backend ---
[INFO] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
[32m :: Spring Boot :: [39m              [2m (v3.2.0)[0;39m

2025-09-17 14:05:03 - Starting WeeklyReportApplication using Java 23.0.2 with PID 64832 (/Volumes/project/my-project/backend/target/classes started by zhangxiaoyu in /Volumes/project/my-project/backend)
2025-09-17 14:05:03 - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-17 14:05:03 - The following 1 profile is active: "dev"
2025-09-17 14:05:05 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-17 14:05:05 - Finished Spring Data repository scanning in 182 ms. Found 13 JPA repository interfaces.
2025-09-17 14:05:07 - Tomcat initialized with port 8081 (http)
2025-09-17 14:05:07 - Starting service [Tomcat]
2025-09-17 14:05:07 - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-17 14:05:07 - Initializing Spring embedded WebApplicationContext
2025-09-17 14:05:07 - Root WebApplicationContext: initialization completed in 4041 ms
2025-09-17 14:05:07 - Filter 'jwtAuthenticationFilter' configured for use
2025-09-17 14:05:08 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-17 14:05:08 - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-17 14:05:08 - HHH000026: Second-level cache disabled
2025-09-17 14:05:08 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-17 14:05:08 - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-17 14:05:08 - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-17 14:05:10 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-17 14:05:10 - WeeklyReportHikariCP-Dev - Starting...
2025-09-17 14:05:11 - WeeklyReportHikariCP-Dev - Added connection com.mysql.cj.jdbc.ConnectionImpl@5e05dd42
2025-09-17 14:05:11 - WeeklyReportHikariCP-Dev - Start completed.
2025-09-17 14:05:11 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-17 14:05:12 - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-17 14:05:14 - AI Monitoring Service initialized
2025-09-17 14:05:14 - Initializing AI service providers...
2025-09-17 14:05:14 - Calling DeepSeek API with URL: https://api.deepseek.com/chat/completions
2025-09-17 14:05:14 - Request payload: {"model":"deepseek-chat","messages":[{"role":"user","content":"hello"}],"temperature":0.1,"stream":false,"max_tokens":10}
2025-09-17 14:05:21 - DeepSeek API response status: 200 OK
2025-09-17 14:05:21 - DeepSeek API response body: {"id":"0da52119-8341-4050-82ea-87166d712a1c","object":"chat.completion","created":1758089117,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"Hello! How can I help you today?"},"logprobs":null,"finish_reason":"length"}],"usage":{"prompt_tokens":5,"completion_tokens":9,"total_tokens":14,"prompt_tokens_details":{"cached_tokens":0},"prompt_cache_hit_tokens":0,"prompt_cache_miss_tokens":5},"system_fingerprint":"fp_08f168e49b_prod0820_fp8_kvcache"}
2025-09-17 14:05:21 - Registered AI provider: DeepSeek AI Service - Status: Configured and healthy
2025-09-17 14:05:21 - Registered AI provider: Mock AI Service for Testing - Status: CONFIGURED
2025-09-17 14:05:21 - Initialized 2 AI service providers
2025-09-17 14:05:27 - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-09-17 14:05:27 - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@652a1eb4, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7ba86d1e, org.springframework.security.web.context.SecurityContextHolderFilter@eb695f7, org.springframework.security.web.header.HeaderWriterFilter@29ef9afd, org.springframework.web.filter.CorsFilter@681f1774, org.springframework.security.web.authentication.logout.LogoutFilter@4685d329, com.weeklyreport.security.JwtAuthenticationFilter@9dc782d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6c488a39, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1a48ab39, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@24e7f89d, org.springframework.security.web.session.SessionManagementFilter@755e2467, org.springframework.security.web.access.ExceptionTranslationFilter@5e563b0a, org.springframework.security.web.access.intercept.AuthorizationFilter@455027ad]
2025-09-17 14:05:31 - Tomcat started on port 8081 (http) with context path '/api'
2025-09-17 14:05:31 - Started WeeklyReportApplication in 28.963 seconds (process running for 29.527)
2025-09-17 14:05:32 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 14:05:32 - Super admin user already exists: superadmin
2025-09-17 14:05:32 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 14:05:32 - Super admin user already exists: zhangxiaoyu
2025-09-17 14:05:32 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 14:05:32 - Admin user already exists: admin1
2025-09-17 14:05:32 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 14:05:32 - Admin user already exists: admin2
2025-09-17 14:05:32 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 14:05:32 - Manager user already exists: manager1
2025-09-17 14:05:34 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-17 14:05:34 - Initializing Servlet 'dispatcherServlet'
2025-09-17 14:05:34 - Completed initialization in 16 ms
2025-09-17 14:05:34 - Securing GET /simple/projects/my?status=ALL
2025-09-17 14:05:34 - Securing GET /reports
2025-09-17 14:05:34 - Processing authentication for request: /api/reports
2025-09-17 14:05:34 - Processing authentication for request: /api/simple/projects/my
2025-09-17 14:05:34 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:05:34 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:05:34 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:05:34 - Successfully authenticated user: manager1 for request: /api/simple/projects/my
2025-09-17 14:05:34 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:05:34 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:05:34 - Cache miss for REQUEST dispatch to '/api/reports' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-17 14:05:35 - Secured GET /reports
2025-09-17 14:05:35 - Secured GET /simple/projects/my?status=ALL
2025-09-17 14:05:35 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:05:35 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:05:35 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:05:35 - Getting weekly reports with filter for user: 5
2025-09-17 14:05:35 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:05:35 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:05:35 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:05:35 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
2025-09-17 14:05:35 - Found 2 reports from repository query
2025-09-17 14:05:35 - Report ID=1, canView=true
2025-09-17 14:05:35 - Converting report ID=1 to response DTO
2025-09-17 14:05:35 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:05:35 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:05:35 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:05:35 - Report ID=2, canView=true
2025-09-17 14:05:35 - Converting report ID=2 to response DTO
2025-09-17 14:05:35 - Creating response with 2 report responses
2025-09-17 14:05:38 - Securing POST /auth/logout
2025-09-17 14:05:39 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 14:05:39 - Secured POST /auth/logout
2025-09-17 14:05:39 - Logout attempt
2025-09-17 14:05:39 - Attempting logout
2025-09-17 14:05:39 - User logged out successfully
2025-09-17 14:05:39 - Logout successful
2025-09-17 14:06:10 - Securing POST /auth/login
2025-09-17 14:06:10 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 14:06:11 - Secured POST /auth/login
2025-09-17 14:06:11 - Login attempt for user: zhangxiaoyu
2025-09-17 14:06:11 - Attempting login for user: zhangxiaoyu
2025-09-17 14:06:11 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 14:06:13 - Invalid password attempt for user: zhangxiaoyu
2025-09-17 14:06:13 - Login failed for user: zhangxiaoyu - Invalid username/email or password
2025-09-17 14:06:26 - Securing POST /auth/login
2025-09-17 14:06:26 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 14:06:26 - Secured POST /auth/login
2025-09-17 14:06:26 - Login attempt for user: admin1
2025-09-17 14:06:26 - Attempting login for user: admin1
2025-09-17 14:06:26 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 14:06:29 - User admin1 logged in successfully
2025-09-17 14:06:29 - 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-09-17 14:06:29 - Login successful for user: admin1
2025-09-17 14:06:29 - Securing GET /reports
2025-09-17 14:06:29 - Processing authentication for request: /api/reports
2025-09-17 14:06:29 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:06:29 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:06:29 - Successfully authenticated user: admin1 for request: /api/reports
2025-09-17 14:06:29 - Secured GET /reports
2025-09-17 14:06:29 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:29 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:29 - Getting weekly reports with filters - page: 0, size: 20 for user: 3
2025-09-17 14:06:29 - Getting weekly reports with filter for user: 3
2025-09-17 14:06:29 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:29 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:06:30 - Found 2 reports from repository query
2025-09-17 14:06:30 - Report ID=1, canView=true
2025-09-17 14:06:30 - Converting report ID=1 to response DTO
2025-09-17 14:06:30 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:30 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:06:30 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:06:30 - Report ID=2, canView=true
2025-09-17 14:06:30 - Converting report ID=2 to response DTO
2025-09-17 14:06:30 - Creating response with 2 report responses
2025-09-17 14:06:32 - Securing GET /reports
2025-09-17 14:06:32 - Processing authentication for request: /api/reports
2025-09-17 14:06:32 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:06:32 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:06:32 - Successfully authenticated user: admin1 for request: /api/reports
2025-09-17 14:06:32 - Secured GET /reports
2025-09-17 14:06:32 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:32 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:32 - Getting weekly reports with filters - page: 0, size: 20 for user: 3
2025-09-17 14:06:32 - Getting weekly reports with filter for user: 3
2025-09-17 14:06:32 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:32 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:06:32 - Found 2 reports from repository query
2025-09-17 14:06:32 - Report ID=1, canView=true
2025-09-17 14:06:32 - Converting report ID=1 to response DTO
2025-09-17 14:06:32 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:32 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:06:32 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:06:32 - Securing GET /reports
2025-09-17 14:06:32 - Processing authentication for request: /api/reports
2025-09-17 14:06:32 - Report ID=2, canView=true
2025-09-17 14:06:32 - Converting report ID=2 to response DTO
2025-09-17 14:06:32 - Creating response with 2 report responses
2025-09-17 14:06:32 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:06:32 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:06:32 - Successfully authenticated user: admin1 for request: /api/reports
2025-09-17 14:06:32 - Secured GET /reports
2025-09-17 14:06:32 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:32 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:32 - Getting weekly reports with filters - page: 0, size: 20 for user: 3
2025-09-17 14:06:32 - Getting weekly reports with filter for user: 3
2025-09-17 14:06:32 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:32 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:06:32 - Found 2 reports from repository query
2025-09-17 14:06:32 - Report ID=1, canView=true
2025-09-17 14:06:32 - Converting report ID=1 to response DTO
2025-09-17 14:06:32 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:32 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:06:32 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:06:32 - Report ID=2, canView=true
2025-09-17 14:06:32 - Converting report ID=2 to response DTO
2025-09-17 14:06:32 - Creating response with 2 report responses
2025-09-17 14:06:33 - Securing GET /reports
2025-09-17 14:06:33 - Processing authentication for request: /api/reports
2025-09-17 14:06:33 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:06:33 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:06:33 - Successfully authenticated user: admin1 for request: /api/reports
2025-09-17 14:06:33 - Secured GET /reports
2025-09-17 14:06:33 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:33 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:33 - Getting weekly reports with filters - page: 0, size: 20 for user: 3
2025-09-17 14:06:33 - Getting weekly reports with filter for user: 3
2025-09-17 14:06:33 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:33 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:06:33 - Found 2 reports from repository query
2025-09-17 14:06:33 - Report ID=1, canView=true
2025-09-17 14:06:33 - Converting report ID=1 to response DTO
2025-09-17 14:06:33 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:33 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:06:33 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:06:33 - Report ID=2, canView=true
2025-09-17 14:06:33 - Converting report ID=2 to response DTO
2025-09-17 14:06:33 - Creating response with 2 report responses
2025-09-17 14:06:40 - Securing GET /simple/projects
2025-09-17 14:06:40 - Processing authentication for request: /api/simple/projects
2025-09-17 14:06:40 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:06:40 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:06:40 - Successfully authenticated user: admin1 for request: /api/simple/projects
2025-09-17 14:06:40 - Secured GET /simple/projects
2025-09-17 14:06:40 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        order by
            sp1_0.created_at desc
2025-09-17 14:06:40 - Securing GET /project-phases/project/1
2025-09-17 14:06:40 - Processing authentication for request: /api/project-phases/project/1
2025-09-17 14:06:40 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:06:40 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:06:40 - Successfully authenticated user: admin1 for request: /api/project-phases/project/1
2025-09-17 14:06:40 - Secured GET /project-phases/project/1
2025-09-17 14:06:40 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 14:06:40 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.ProjectPhaseController.getProjectPhases(java.lang.Long,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.ProjectPhaseController]
2025-09-17 14:06:40 - 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
Hibernate: 
    /* select
        count(*) 
    from
        SimpleProject x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            simple_projects sp1_0 
        where
            sp1_0.id=?
2025-09-17 14:06:40 - 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
Hibernate: 
    /* <criteria> */ select
        pp1_0.id,
        pp1_0.actual_results,
        pp1_0.assigned_members,
        pp1_0.completion_date,
        pp1_0.created_at,
        pp1_0.end_date,
        pp1_0.estimated_results,
        pp1_0.key_indicators,
        pp1_0.phase_description,
        pp1_0.phase_name,
        pp1_0.phase_order,
        pp1_0.project_id,
        pp1_0.start_date,
        pp1_0.status,
        pp1_0.timeline,
        pp1_0.updated_at 
    from
        project_phases pp1_0 
    where
        pp1_0.project_id=? 
    order by
        pp1_0.phase_order
2025-09-17 14:06:40 - Securing GET /reports
2025-09-17 14:06:40 - Processing authentication for request: /api/reports
2025-09-17 14:06:40 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:06:40 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:06:40 - Successfully authenticated user: admin1 for request: /api/reports
2025-09-17 14:06:40 - Secured GET /reports
2025-09-17 14:06:40 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:40 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:06:40 - Getting weekly reports with filters - page: 0, size: 20 for user: 3
2025-09-17 14:06:40 - Getting weekly reports with filter for user: 3
2025-09-17 14:06:40 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:40 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:06:40 - Found 2 reports from repository query
2025-09-17 14:06:40 - Report ID=1, canView=true
2025-09-17 14:06:40 - Converting report ID=1 to response DTO
2025-09-17 14:06:40 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:06:40 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:06:40 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:06:40 - Report ID=2, canView=true
2025-09-17 14:06:40 - Converting report ID=2 to response DTO
2025-09-17 14:06:40 - Creating response with 2 report responses
2025-09-17 14:08:57 - Securing GET /health/authenticated
2025-09-17 14:08:57 - Securing GET /health/authenticated
2025-09-17 14:08:57 - Processing authentication for request: /api/health/authenticated
2025-09-17 14:08:57 - Processing authentication for request: /api/health/authenticated
2025-09-17 14:08:57 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:08:57 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:08:57 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:08:57 - Successfully authenticated user: admin1 for request: /api/health/authenticated
2025-09-17 14:08:57 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:08:57 - Successfully authenticated user: admin1 for request: /api/health/authenticated
2025-09-17 14:08:57 - Secured GET /health/authenticated
2025-09-17 14:08:57 - Secured GET /health/authenticated
2025-09-17 14:08:57 - Authorizing method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:08:57 - Authorizing method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:08:57 - Authorized method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:08:57 - Authorized method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:08:57 - Securing GET /reports
2025-09-17 14:08:57 - Processing authentication for request: /api/reports
2025-09-17 14:08:57 - Extracted authorities from token: [ROLE_ADMIN] for roles: ROLE_ADMIN
2025-09-17 14:08:57 - Created authentication for user admin1 with authorities: [ROLE_ADMIN]
2025-09-17 14:08:57 - Successfully authenticated user: admin1 for request: /api/reports
2025-09-17 14:08:57 - Secured GET /reports
2025-09-17 14:08:57 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:08:57 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:08:57 - Getting weekly reports with filters - page: 0, size: 20 for user: 3
2025-09-17 14:08:57 - Getting weekly reports with filter for user: 3
2025-09-17 14:08:57 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:08:57 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:08:57 - Found 2 reports from repository query
2025-09-17 14:08:57 - Report ID=1, canView=true
2025-09-17 14:08:57 - Converting report ID=1 to response DTO
2025-09-17 14:08:57 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:08:57 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:08:57 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:08:57 - Report ID=2, canView=true
2025-09-17 14:08:57 - Converting report ID=2 to response DTO
2025-09-17 14:08:57 - Creating response with 2 report responses
2025-09-17 14:09:44 - Securing POST /auth/logout
2025-09-17 14:09:44 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 14:09:44 - Secured POST /auth/logout
2025-09-17 14:09:44 - Logout attempt
2025-09-17 14:09:44 - Attempting logout
2025-09-17 14:09:44 - User logged out successfully
2025-09-17 14:09:44 - Logout successful
2025-09-17 14:10:00 - Securing POST /auth/login
2025-09-17 14:10:00 - Set SecurityContextHolder to anonymous SecurityContext
2025-09-17 14:10:00 - Secured POST /auth/login
2025-09-17 14:10:00 - Login attempt for user: manager1
2025-09-17 14:10:00 - Attempting login for user: manager1
2025-09-17 14:10:00 - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-17 14:10:01 - User manager1 logged in successfully
2025-09-17 14:10:01 - 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    /* update
        for com.weeklyreport.entity.User */update users 
    set
        avatar_url=?,
        department_id=?,
        email=?,
        employee_id=?,
        full_name=?,
        last_login_time=?,
        password=?,
        phone=?,
        position=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-09-17 14:10:01 - Login successful for user: manager1
2025-09-17 14:10:01 - Securing GET /reports
2025-09-17 14:10:01 - Processing authentication for request: /api/reports
2025-09-17 14:10:01 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:01 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:01 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:10:01 - Secured GET /reports
2025-09-17 14:10:01 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:01 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:01 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:10:01 - Getting weekly reports with filter for user: 5
2025-09-17 14:10:01 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:01 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:10:01 - Found 2 reports from repository query
2025-09-17 14:10:01 - Report ID=1, canView=true
2025-09-17 14:10:01 - Converting report ID=1 to response DTO
2025-09-17 14:10:01 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:01 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:10:01 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:10:01 - Report ID=2, canView=true
2025-09-17 14:10:01 - Converting report ID=2 to response DTO
2025-09-17 14:10:01 - Creating response with 2 report responses
2025-09-17 14:10:06 - Securing GET /reports
2025-09-17 14:10:06 - Processing authentication for request: /api/reports
2025-09-17 14:10:06 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:06 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:06 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:10:06 - Secured GET /reports
2025-09-17 14:10:06 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:06 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:06 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:10:06 - Getting weekly reports with filter for user: 5
2025-09-17 14:10:06 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:06 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:10:06 - Found 2 reports from repository query
2025-09-17 14:10:06 - Report ID=1, canView=true
2025-09-17 14:10:06 - Converting report ID=1 to response DTO
2025-09-17 14:10:06 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:06 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:10:06 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:10:06 - Report ID=2, canView=true
2025-09-17 14:10:06 - Converting report ID=2 to response DTO
2025-09-17 14:10:06 - Creating response with 2 report responses
2025-09-17 14:10:06 - Securing GET /reports
2025-09-17 14:10:06 - Processing authentication for request: /api/reports
2025-09-17 14:10:06 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:06 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:06 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:10:06 - Secured GET /reports
2025-09-17 14:10:06 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:06 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:06 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:10:06 - Getting weekly reports with filter for user: 5
2025-09-17 14:10:06 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:06 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:10:06 - Found 2 reports from repository query
2025-09-17 14:10:06 - Report ID=1, canView=true
2025-09-17 14:10:06 - Converting report ID=1 to response DTO
2025-09-17 14:10:06 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:06 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:10:06 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:10:06 - Report ID=2, canView=true
2025-09-17 14:10:06 - Converting report ID=2 to response DTO
2025-09-17 14:10:06 - Creating response with 2 report responses
2025-09-17 14:10:06 - Securing GET /reports
2025-09-17 14:10:06 - Processing authentication for request: /api/reports
2025-09-17 14:10:06 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:06 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:06 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:10:06 - Secured GET /reports
2025-09-17 14:10:06 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:06 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:06 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:10:06 - Getting weekly reports with filter for user: 5
2025-09-17 14:10:06 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:06 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:10:06 - Found 2 reports from repository query
2025-09-17 14:10:06 - Report ID=1, canView=true
2025-09-17 14:10:06 - Converting report ID=1 to response DTO
2025-09-17 14:10:06 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:06 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:10:06 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:10:06 - Report ID=2, canView=true
2025-09-17 14:10:06 - Converting report ID=2 to response DTO
2025-09-17 14:10:06 - Creating response with 2 report responses
2025-09-17 14:10:08 - Securing GET /simple/projects/my?status=ALL
2025-09-17 14:10:08 - Processing authentication for request: /api/simple/projects/my
2025-09-17 14:10:08 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:08 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:08 - Successfully authenticated user: manager1 for request: /api/simple/projects/my
2025-09-17 14:10:08 - Secured GET /simple/projects/my?status=ALL
2025-09-17 14:10:08 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:08 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
2025-09-17 14:10:08 - Securing GET /reports
2025-09-17 14:10:08 - Processing authentication for request: /api/reports
2025-09-17 14:10:08 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:08 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:08 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:10:08 - Secured GET /reports
2025-09-17 14:10:08 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:08 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:08 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:10:08 - Getting weekly reports with filter for user: 5
2025-09-17 14:10:08 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:08 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:10:08 - Found 2 reports from repository query
2025-09-17 14:10:08 - Report ID=1, canView=true
2025-09-17 14:10:08 - Converting report ID=1 to response DTO
2025-09-17 14:10:08 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:08 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:10:08 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:10:08 - Report ID=2, canView=true
2025-09-17 14:10:08 - Converting report ID=2 to response DTO
2025-09-17 14:10:08 - Creating response with 2 report responses
2025-09-17 14:10:11 - Securing GET /reports
2025-09-17 14:10:11 - Processing authentication for request: /api/reports
2025-09-17 14:10:11 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:11 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:11 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:10:11 - Secured GET /reports
2025-09-17 14:10:11 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:11 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:11 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:10:11 - Getting weekly reports with filter for user: 5
2025-09-17 14:10:11 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:11 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:10:11 - Found 2 reports from repository query
2025-09-17 14:10:11 - Report ID=1, canView=true
2025-09-17 14:10:11 - Converting report ID=1 to response DTO
2025-09-17 14:10:11 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:11 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:10:11 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:10:11 - Report ID=2, canView=true
2025-09-17 14:10:11 - Converting report ID=2 to response DTO
2025-09-17 14:10:11 - Creating response with 2 report responses
2025-09-17 14:10:11 - Securing GET /simple/projects/my?status=ALL
2025-09-17 14:10:11 - Processing authentication for request: /api/simple/projects/my
2025-09-17 14:10:11 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:11 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:11 - Successfully authenticated user: manager1 for request: /api/simple/projects/my
2025-09-17 14:10:11 - Secured GET /simple/projects/my?status=ALL
2025-09-17 14:10:11 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:11 - 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
Hibernate: 
    /* SELECT
        p 
    FROM
        SimpleProject p 
    LEFT JOIN
        
    FETCH
        p.createdBy 
    LEFT JOIN
        
    FETCH
        p.managerReviewer 
    LEFT JOIN
        
    FETCH
        p.adminReviewer 
    LEFT JOIN
        
    FETCH
        p.superAdminReviewer 
    WHERE
        p.createdBy = :createdBy 
    ORDER BY
        p.createdAt DESC */ select
            sp1_0.id,
            sp1_0.actual_results,
            sp1_0.admin_review_comment,
            sp1_0.admin_reviewed_at,
            ar1_0.id,
            ar1_0.avatar_url,
            ar1_0.created_at,
            ar1_0.department_id,
            ar1_0.email,
            ar1_0.employee_id,
            ar1_0.full_name,
            ar1_0.last_login_time,
            ar1_0.password,
            ar1_0.phone,
            ar1_0.position,
            ar1_0.role,
            ar1_0.status,
            ar1_0.updated_at,
            ar1_0.username,
            sp1_0.ai_analysis_result,
            sp1_0.ai_analyzed_at,
            sp1_0.ai_confidence,
            sp1_0.ai_feasibility_score,
            sp1_0.ai_key_issues,
            sp1_0.ai_processing_time_ms,
            sp1_0.ai_provider_used,
            sp1_0.ai_recommendations,
            sp1_0.ai_risk_level,
            sp1_0.created_at,
            sp1_0.created_by,
            cb1_0.id,
            cb1_0.avatar_url,
            cb1_0.created_at,
            cb1_0.department_id,
            cb1_0.email,
            cb1_0.employee_id,
            cb1_0.full_name,
            cb1_0.last_login_time,
            cb1_0.password,
            cb1_0.phone,
            cb1_0.position,
            cb1_0.role,
            cb1_0.status,
            cb1_0.updated_at,
            cb1_0.username,
            sp1_0.expected_results,
            sp1_0.manager_review_comment,
            sp1_0.manager_reviewed_at,
            mr1_0.id,
            mr1_0.avatar_url,
            mr1_0.created_at,
            mr1_0.department_id,
            mr1_0.email,
            mr1_0.employee_id,
            mr1_0.full_name,
            mr1_0.last_login_time,
            mr1_0.password,
            mr1_0.phone,
            mr1_0.position,
            mr1_0.role,
            mr1_0.status,
            mr1_0.updated_at,
            mr1_0.username,
            sp1_0.project_content,
            sp1_0.project_members,
            sp1_0.project_name,
            sp1_0.status,
            sp1_0.stop_loss,
            sp1_0.super_admin_review_comment,
            sp1_0.super_admin_reviewed_at,
            sar1_0.id,
            sar1_0.avatar_url,
            sar1_0.created_at,
            sar1_0.department_id,
            sar1_0.email,
            sar1_0.employee_id,
            sar1_0.full_name,
            sar1_0.last_login_time,
            sar1_0.password,
            sar1_0.phone,
            sar1_0.position,
            sar1_0.role,
            sar1_0.status,
            sar1_0.updated_at,
            sar1_0.username,
            sp1_0.timeline,
            sp1_0.updated_at 
        from
            simple_projects sp1_0 
        left join
            users cb1_0 
                on cb1_0.id=sp1_0.created_by 
        left join
            users mr1_0 
                on mr1_0.id=sp1_0.manager_reviewer_id 
        left join
            users ar1_0 
                on ar1_0.id=sp1_0.admin_reviewer_id 
        left join
            users sar1_0 
                on sar1_0.id=sp1_0.super_admin_reviewer_id 
        where
            cb1_0.id=? 
        order by
            sp1_0.created_at desc
2025-09-17 14:10:12 - Securing GET /reports
2025-09-17 14:10:12 - Processing authentication for request: /api/reports
2025-09-17 14:10:12 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:12 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:12 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:10:12 - Secured GET /reports
2025-09-17 14:10:12 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:12 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:12 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:10:12 - Getting weekly reports with filter for user: 5
2025-09-17 14:10:12 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:12 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:10:12 - Found 2 reports from repository query
2025-09-17 14:10:12 - Report ID=1, canView=true
2025-09-17 14:10:12 - Converting report ID=1 to response DTO
2025-09-17 14:10:12 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:12 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:10:12 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:10:12 - Report ID=2, canView=true
2025-09-17 14:10:12 - Converting report ID=2 to response DTO
2025-09-17 14:10:12 - Creating response with 2 report responses
2025-09-17 14:10:20 - Securing GET /health/authenticated
2025-09-17 14:10:20 - Securing GET /health/authenticated
2025-09-17 14:10:20 - Processing authentication for request: /api/health/authenticated
2025-09-17 14:10:20 - Processing authentication for request: /api/health/authenticated
2025-09-17 14:10:20 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:20 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:20 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:20 - Successfully authenticated user: manager1 for request: /api/health/authenticated
2025-09-17 14:10:20 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:20 - Successfully authenticated user: manager1 for request: /api/health/authenticated
2025-09-17 14:10:20 - Secured GET /health/authenticated
2025-09-17 14:10:20 - Secured GET /health/authenticated
2025-09-17 14:10:20 - Authorizing method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:10:20 - Authorizing method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:10:20 - Authorized method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:10:20 - Authorized method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:10:20 - Securing GET /reports
2025-09-17 14:10:20 - Processing authentication for request: /api/reports
2025-09-17 14:10:20 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:10:20 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:10:20 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:10:20 - Secured GET /reports
2025-09-17 14:10:20 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:20 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:10:20 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:10:20 - Getting weekly reports with filter for user: 5
2025-09-17 14:10:20 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:20 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:10:20 - Found 2 reports from repository query
2025-09-17 14:10:20 - Report ID=1, canView=true
2025-09-17 14:10:20 - Converting report ID=1 to response DTO
2025-09-17 14:10:20 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:10:20 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:10:20 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:10:20 - Report ID=2, canView=true
2025-09-17 14:10:20 - Converting report ID=2 to response DTO
2025-09-17 14:10:20 - Creating response with 2 report responses
2025-09-17 14:14:49 - Securing GET /health/authenticated
2025-09-17 14:14:49 - Securing GET /health/authenticated
2025-09-17 14:14:49 - Processing authentication for request: /api/health/authenticated
2025-09-17 14:14:49 - Processing authentication for request: /api/health/authenticated
2025-09-17 14:14:49 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:14:49 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:14:49 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:14:49 - Successfully authenticated user: manager1 for request: /api/health/authenticated
2025-09-17 14:14:49 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:14:49 - Successfully authenticated user: manager1 for request: /api/health/authenticated
2025-09-17 14:14:49 - Secured GET /health/authenticated
2025-09-17 14:14:49 - Secured GET /health/authenticated
2025-09-17 14:14:49 - Authorizing method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:14:49 - Authorizing method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:14:49 - Authorized method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:14:49 - Authorized method invocation ReflectiveMethodInvocation: public com.weeklyreport.dto.ApiResponse com.weeklyreport.controller.HealthController.authenticatedHealth(org.springframework.security.core.Authentication); target is of class [com.weeklyreport.controller.HealthController]
2025-09-17 14:14:49 - Securing GET /reports
2025-09-17 14:14:49 - Processing authentication for request: /api/reports
2025-09-17 14:14:49 - Extracted authorities from token: [ROLE_MANAGER] for roles: ROLE_MANAGER
2025-09-17 14:14:49 - Created authentication for user manager1 with authorities: [ROLE_MANAGER]
2025-09-17 14:14:49 - Successfully authenticated user: manager1 for request: /api/reports
2025-09-17 14:14:49 - Secured GET /reports
2025-09-17 14:14:49 - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:14:49 - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.weeklyreport.controller.WeeklyReportController.getWeeklyReports(java.lang.String,java.lang.String,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,com.weeklyreport.security.CustomUserPrincipal); target is of class [com.weeklyreport.controller.WeeklyReportController]
2025-09-17 14:14:49 - Getting weekly reports with filters - page: 0, size: 20 for user: 5
2025-09-17 14:14:49 - Getting weekly reports with filter for user: 5
2025-09-17 14:14:49 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:14:49 - 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
Hibernate: 
    /* SELECT
        DISTINCT r 
    FROM
        WeeklyReport r 
    WHERE
        r.author = :user 
        OR (
            :userRole = 'SUPER_ADMIN'
        ) 
        OR (
            :userRole = 'ADMIN'
        ) 
        OR (
            :userRole = 'MANAGER' 
            AND r.author.department = :userDepartment
        ) 
    order by
        r.reportWeek desc */ select
            distinct wr1_0.id,
            wr1_0.achievements,
            wr1_0.additional_notes,
            wr1_0.admin_review_comment,
            wr1_0.admin_reviewed_at,
            wr1_0.admin_reviewer_id,
            wr1_0.ai_analysis_result,
            wr1_0.ai_analyzed_at,
            wr1_0.ai_confidence,
            wr1_0.ai_key_issues,
            wr1_0.ai_processing_time_ms,
            wr1_0.ai_provider_used,
            wr1_0.ai_quality_score,
            wr1_0.ai_recommendations,
            wr1_0.ai_risk_level,
            wr1_0.author_id,
            wr1_0.challenges,
            wr1_0.content,
            wr1_0.created_at,
            wr1_0.is_late,
            wr1_0.manager_review_comment,
            wr1_0.manager_reviewed_at,
            wr1_0.manager_reviewer_id,
            wr1_0.next_week_plan,
            wr1_0.priority,
            wr1_0.report_week,
            wr1_0.review_comment,
            wr1_0.reviewed_at,
            wr1_0.reviewer_id,
            wr1_0.status,
            wr1_0.submitted_at,
            wr1_0.super_admin_review_comment,
            wr1_0.super_admin_reviewed_at,
            wr1_0.super_admin_reviewer_id,
            wr1_0.template_id,
            wr1_0.title,
            wr1_0.updated_at,
            wr1_0.week_number,
            wr1_0.word_count,
            wr1_0.work_summary,
            wr1_0.report_year 
        from
            weekly_reports wr1_0 
        join
            users a1_0 
                on a1_0.id=wr1_0.author_id 
        where
            wr1_0.author_id=? 
            or (
                ?='SUPER_ADMIN'
            ) 
            or (
                ?='ADMIN'
            ) 
            or (
                ?='MANAGER' 
                and a1_0.department_id=?
            ) 
        order by
            wr1_0.report_week desc 
        limit
            ?, ?
2025-09-17 14:14:49 - Found 2 reports from repository query
2025-09-17 14:14:49 - Report ID=1, canView=true
2025-09-17 14:14:49 - Converting report ID=1 to response DTO
2025-09-17 14:14:49 - 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.department_id,
        u1_0.email,
        u1_0.employee_id,
        u1_0.full_name,
        u1_0.last_login_time,
        u1_0.password,
        u1_0.phone,
        u1_0.position,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-17 14:14:49 - 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
Hibernate: 
    select
        c1_0.weekly_report_id,
        c1_0.id,
        c1_0.attachments,
        c1_0.author_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.is_private,
        c1_0.is_resolved,
        c1_0.likes_count,
        c1_0.parent_id,
        c1_0.priority,
        c1_0.resolved_at,
        c1_0.resolved_by,
        c1_0.status,
        c1_0.tags,
        c1_0.type,
        c1_0.updated_at 
    from
        comments c1_0 
    where
        c1_0.weekly_report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        c1_0.created_at
2025-09-17 14:14:49 - 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
Hibernate: 
    select
        ar1_0.report_id,
        ar1_0.id,
        ar1_0.analysis_type,
        ar1_0.completed_at,
        ar1_0.confidence,
        ar1_0.created_at,
        ar1_0.error_message,
        ar1_0.metadata,
        ar1_0.model_version,
        ar1_0.parameters,
        ar1_0.processing_time_ms,
        ar1_0.result,
        ar1_0.status,
        ar1_0.updated_at 
    from
        ai_analysis_results ar1_0 
    where
        ar1_0.report_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    order by
        ar1_0.created_at desc
2025-09-17 14:14:49 - Report ID=2, canView=true
2025-09-17 14:14:49 - Converting report ID=2 to response DTO
2025-09-17 14:14:49 - Creating response with 2 report responses
2025-09-17 14:15:04 - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-17 14:15:04 - WeeklyReportHikariCP-Dev - Shutdown initiated...
2025-09-17 14:15:04 - WeeklyReportHikariCP-Dev - Shutdown completed.
