version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: weekly-report-mysql-dev
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: weekly_report_dev
      MYSQL_USER: dev_user
      MYSQL_PASSWORD: dev_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - weekly-report-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: weekly-report-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - weekly-report-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Backend API (will be built by Stream A)
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: weekly-report-backend-dev
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: development
      DB_HOST: mysql
      DB_USERNAME: dev_user
      DB_PASSWORD: dev_password
      REDIS_HOST: redis
      JWT_SECRET: dev-secret-key-change-in-production
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - weekly-report-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (will be built by Stream B)
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: weekly-report-frontend-dev
    ports:
      - "5173:5173"
    environment:
      VITE_API_BASE_URL: http://localhost:8080/api
      NODE_ENV: development
    depends_on:
      - backend
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    networks:
      - weekly-report-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: weekly-report-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - weekly-report-network
    restart: unless-stopped

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog
    container_name: weekly-report-mailhog-dev
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - weekly-report-network

  # phpMyAdmin for database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: weekly-report-phpmyadmin-dev
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: rootpassword
    depends_on:
      - mysql
    networks:
      - weekly-report-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  weekly-report-network:
    driver: bridge